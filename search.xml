<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Express4.X</title>
    <url>/posts/cb0e.html</url>
    <content><![CDATA[<h1 id="Nodejs学习笔记"><a href="#Nodejs学习笔记" class="headerlink" title="Nodejs学习笔记"></a>Nodejs学习笔记</h1><h2 id="第七章-Express4-X"><a href="#第七章-Express4-X" class="headerlink" title="第七章 Express4.X"></a>第七章 Express4.X</h2><h3 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h3><p>Express是简介灵活的node.jsWeb应用框架，提供强大的特性帮助创建各种web应用。Express不对node.js已有的特性进行二次抽象，只在它基础上拓展了web应用所需的功能。</p>
<p>Express中主要学习：路由、中间件、模板引擎、其中路由和模板引擎的概念与其他语言一致，比如PHP</p>
<h3 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h3><pre class=" language-shell"><code class="language-shell">#依赖安装express
npm install express --save</code></pre>
<h3 id="安装EXpress应用程序生成器"><a href="#安装EXpress应用程序生成器" class="headerlink" title="安装EXpress应用程序生成器"></a>安装EXpress应用程序生成器</h3><p>通过应用程序生成器可以快速创建一个应用的骨架</p>
<pre class=" language-shell"><code class="language-shell">#安装生成器，如果之前全局安装过，之后可以不用安装
npm install -g express-generator
#创建项目
express --view=ejs projectName   #projectName是项目名 模板引擎为ejs
#创建项目之后进入到项目文件
cd projectName
#将项目文件夹下package.json里的依赖包全部安装
npm i
#启动项目，默认是3000端口
npm start</code></pre>
<h3 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h3><ul>
<li><p>bin/www文件：启动js，15行左右可以修改服务端口号。</p>
</li>
<li><p>node_modules目录：存放所有局部安装的包。</p>
</li>
<li><p>public目录：存放静态文件，如css、image、js文件等。</p>
</li>
<li><p>routes目录：存放路由文件。</p>
</li>
<li><p>views目录：存放页面</p>
</li>
<li><p>app.js文件：项目主文件</p>
</li>
<li><p>package.json文件：npm配置文件</p>
<p>npm i：启动该配置文件中dependencies下的依赖包。</p>
<p>npm start：就是运行该配置文件中scripts下面的start命令。</p>
</li>
</ul>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在app.js文件引进路由并开启路由</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引进路由</span>
<span class="token keyword">var</span> listRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被引入的文件后缀.js可省略</span>
<span class="token comment" spellcheck="true">//开启路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>listRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在routes文件夹下写路由文件（js文件）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//get方式请求</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人访问list！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//req.query属性以对象存放了所有get请求的参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//给客户端响应</span>
    <span class="token comment" spellcheck="true">// res.send('Welcome list!');</span>

    <span class="token comment" spellcheck="true">//render()渲染页面，并返回给客户端</span>
    <span class="token comment" spellcheck="true">//第一个参数是页面的名字，页面放在views文件夹下</span>
    <span class="token comment" spellcheck="true">//第二个参数是传递给模板引擎的</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后缀可以省略</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//post方式请求</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//req.body属性存放了post数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//动态路由,加上“:”,就成了动态路由，并且通过req.params拿到该数据</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:name/:age'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这是动态路由！'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//除了动态路由，地址栏还可以使用正则表达式</span>
<span class="token comment" spellcheck="true">//abc+表示ab开始后面至少一个c</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/abc+'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这是正则！'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//访问list下的product网页</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/product'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人访问list/product!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Welcome list/product!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//定义模块</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="中间件简介"><a href="#中间件简介" class="headerlink" title="中间件简介"></a>中间件简介</h4><p>Express是一个自身功能极简，完全是由路由和中间件构成一个web开发框架：从本质上来说，一个Express应用就是在调用各种中间件，路由也是特殊的中间件。</p>
<p>中间件是可以访问请求对象（req）、响应对象（res）以及next应用程序请求-响应周期中的函数。使用app.use()来使用/定义中间件。</p>
<p>本质上，中间件就是在请求后，响应前要执行的函数，中间件就是函数使用app.use()方法，可以给express应用添加任意中间件功能函数。</p>
<h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><p>从Express4.X开始，express不再依赖Content，这意味着express将大多数内置中间件都剥离出去了，比如之前的body-parser，cookie-parser等中间件，现使用body-parser，cookie-parser的方法是第三方中间件。</p>
<p>Express4.X内置的中间件是express.static静态资源挂载，Express4.16后又新增了express.json和express.urlencoded，分别用来解析req传入的json格式、urlencoded格式数据。</p>
<h5 id="express-static的使用"><a href="#express-static的使用" class="headerlink" title="express.static的使用"></a>express.static的使用</h5><p>静态资源指的就是存在于服务器端的文件，例如html/css/js/图片等文件都是静态资源文件，浏览器需要访问，服务器才会返回这些静态资源文件的内容。</p>
<p>express.static()封装了路径和读取/响应文件的方法内，我们可以把某个文件夹暴露给浏览器直接进行路径的访问即可。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从public下索引前端访问的资源路径</span></code></pre>
<p>这里有个<strong>ejs引擎中的资源路径问题</strong>：ejs项目中，因为有上面这条配置，项目中所有的静态资源引用路径都可以认为ejs文件和静态资源文件在同一个目录下。</p>
<h5 id="app-use-虚拟路径使用"><a href="#app-use-虚拟路径使用" class="headerlink" title="app.use()虚拟路径使用"></a>app.use()虚拟路径使用</h5><p>第一个参数为虚拟路径（可以理解成浏览器访问路径去掉主目录后的路径），前端必须先访问命中此虚拟路径，才能用接下来的路径匹配后面的路由路径。如果省略第一个参数，则会过滤所有的请求，并且回调函数中的url是（去掉访问路径主目录后的）全地址，因为没有被分组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>routerList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问list目录</span></code></pre>
<h5 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h5><p>所谓中间件其实就是一个方法，只需要遵循MiddleWare Funtion就可以了。它有四个参数：</p>
<ul>
<li>第一个参数接收上一个中间件通过next()传递的实参。</li>
<li>第二个参数为请求对象，包含了浏览器请求的信息。</li>
<li>第三个参数为响应对象，包含了服务器响应的信息。</li>
<li>第四个参数为next，方法next()调用下一个中间件函数执行，可以传递参数给下一个中间件。</li>
</ul>
<p>中间件的执行顺序是从上往下执行的，需要注意调用次序。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>app.js</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//引进路由</span>
<span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> usersRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> listRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//引入自定义中间件</span>
<span class="token keyword">var</span> customMid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./customMiddleWare/customMid1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// view engine setup</span>
<span class="token comment" spellcheck="true">//设置页面的ejs模板引擎</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置了静态页面存放的地址（views）</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面引擎是 ejs</span>

<span class="token comment" spellcheck="true">//中间件</span>
<span class="token comment" spellcheck="true">//第一个参数：url</span>
<span class="token comment" spellcheck="true">//如果省略第一个参数，则会过滤所有的请求。并且回调函数中的url是全地址，因为没有被分组。</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印日志</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//json序列化客户端传入的数据参数</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//encoded</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cookie处理</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回静态资源，如果是请求静态文件，则返回，并且结束响应。如果不是请求静态文件，则继续往下匹配路由。</span>


<span class="token comment" spellcheck="true">//自定义一个中间件</span>
<span class="token comment" spellcheck="true">// app.use('/list',(req,res,next)=>{</span>
<span class="token comment" spellcheck="true">//   console.log('This is a custom middleware!');</span>
<span class="token comment" spellcheck="true">//   console.log(req.url);</span>
<span class="token comment" spellcheck="true">//   if(req.url === '/'){</span>
<span class="token comment" spellcheck="true">//     res.send('你的访问被拦截，无法访问list！');</span>
<span class="token comment" spellcheck="true">//   }else{</span>
<span class="token comment" spellcheck="true">//     next();</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">//   // next();</span>
<span class="token comment" spellcheck="true">// })</span>
 app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>customMid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的中间件通过模块引入</span>

<span class="token comment" spellcheck="true">//中间价传值：从上一个中间件next()的参数传值给下一个中间件</span>
<span class="token comment" spellcheck="true">//回调函数参数变为四个，第一个参数接收上一个中间件传递的实参</span>
<span class="token comment" spellcheck="true">// app.use('/list',(arg,req,res,next)=>{</span>
<span class="token comment" spellcheck="true">//   console.log(arg);</span>
<span class="token comment" spellcheck="true">//   next();</span>
<span class="token comment" spellcheck="true">// })</span>

<span class="token comment" spellcheck="true">//启用路由，第一个参数匹配地址的第一段</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> usersRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>listRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// catch 404 and forward to error handler</span>
<span class="token comment" spellcheck="true">//创建错误</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// error handler</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// set locals, only providing error in development</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>message <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>error <span class="token operator">=</span> req<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'development'</span> <span class="token operator">?</span> err <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// render the error page</span>
  <span class="token comment" spellcheck="true">//返回错误页面</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span></code></pre>
<p>自定义中间件customMid</p>
<pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a custom middleware!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你的访问被拦截，无法访问list！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'这是上一个中间件返回的值！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// next();</span>
 <span class="token punctuation">}</span>

 module<span class="token punctuation">.</span>exports <span class="token operator">=</span> fn<span class="token punctuation">;</span></code></pre>
<p>访问：<a href="http://localhost:3000/list%EF%BC%8C%E4%BC%9A%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:3000/list，会显示：</a> 你的访问被拦截，无法访问list！ </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express4.X</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-BOM</title>
    <url>/posts/20ad.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第十章-BOM"><a href="#第十章-BOM" class="headerlink" title="第十章 BOM"></a>第十章 BOM</h2><h3 id="1、BOM-window对象"><a href="#1、BOM-window对象" class="headerlink" title="1、BOM-window对象"></a>1、BOM-window对象</h3><p>BOM全称Browser Object Model-浏览器对象模型，提供了很多对象，用于访问浏览器的功能，没有规范，由各个浏览器厂商制定标准，兼容性差。</p>
<p>BOM的核心是window：</p>
<ul>
<li>所有浏览器都支持window对象，它表示浏览器窗口。</li>
<li>所有js的全局对象、函数及变量均自动成为window对象的成员。</li>
<li>全局变量是window对象的属性。</li>
<li>全局函数是window对象的方法。</li>
<li>HTML DOM的document也是window对象的属性之一。</li>
</ul>
<h4 id="1-1、window的子对象主要有："><a href="#1-1、window的子对象主要有：" class="headerlink" title="1-1、window的子对象主要有："></a>1-1、window的子对象主要有：</h4><ul>
<li>JavaScript document对象</li>
<li>JavaScript frames对象</li>
<li>JavaScript history对象</li>
<li>JavaScript location对象</li>
<li>JavaScript navigator对象</li>
<li>JavaScript screen对象</li>
</ul>
<h4 id="1-2、window尺寸"><a href="#1-2、window尺寸" class="headerlink" title="1-2、window尺寸"></a>1-2、window尺寸</h4><p>有三种方法能够确定浏览器窗口的尺寸（不包括工具栏和滚动条）。</p>
<ul>
<li>对于IE9及以上、及其他标准浏览器<ul>
<li>window.innerHeight -浏览器窗口内部高度</li>
<li>window.innerWidth -浏览器窗口的内部宽度</li>
</ul>
</li>
<li>对于IE8及以下<ul>
<li>document.documentElement.clientHeigth</li>
<li>document.documentElement.clientWidth</li>
</ul>
</li>
<li>或者，用以下方法获取body的高度，当页面没有内容时，以下方法获取的高度为0，但上面两种方法能获取到页面高度。<ul>
<li>document.body.clientHeight</li>
<li>document.body.clientWidth</li>
</ul>
</li>
</ul>
<p>document.body.clientHeight与document.body.clientHeight都是获取页面可视度高度。但是在不同的html声明中获取的高度不一样，一定要注意。</p>
<p>如果加了声明使用document.documentElement.clientHeight获取正常，但是使用document.body.clientHeight获取就有问题。</p>
<p>如果缺少声明使用document.documentElement.clientHeight获取有问题，但是使用document.body.clientHeight获取正常。</p>
<p>因为是最新的html5标准，所以建议使用document.documentElement.clientHeight获取。</p>
<p>实用的js解决方案为：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
<span class="token keyword">var</span> height <span class="token operator">=</span> widow<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeiht</code></pre>
<h3 id="2、window的open与close方法"><a href="#2、window的open与close方法" class="headerlink" title="2、window的open与close方法"></a>2、window的open与close方法</h3><h4 id="2-1、open"><a href="#2-1、open" class="headerlink" title="2-1、open()"></a>2-1、open()</h4><p>该方法用于打开一个新的浏览器窗口。</p>
<p>语法：window.open(url，name，specs，repalce)</p>
<ul>
<li>url：打开指定url的页面，如果省略，打开新的空白窗口。</li>
<li>name：指定target属性或窗口的名称，值如下：<ul>
<li>_blank –新窗口打开，默认。</li>
<li>_self –当前窗口打开</li>
<li>_parent –url加载到父框架</li>
<li>_top –url替换任何可加载的框架集</li>
<li>name –窗口名称</li>
</ul>
</li>
<li>specs：一个逗号分隔的项目列表，如窗口大小、是否显示菜单栏、是否显示滚动条、是否显示地址字段等。</li>
<li>replace：新窗口是否取代浏览器记录中的位置。<ul>
<li>true –url替换浏览历史中的当前条目</li>
<li>false –url在浏览器中创建新的条目</li>
</ul>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>打开百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-2、close"><a href="#2-2、close" class="headerlink" title="2-2、close()"></a>2-2、close()</h4><p>该方法用于关闭浏览器窗口，该方法没有参数。</p>
<p>语法：window.close()</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3、location对象"><a href="#3、location对象" class="headerlink" title="3、location对象"></a>3、location对象</h3><p>location是最有用的BOM对象之一，它用于获得当前页面的url地址，并把浏览器定向到新的页面。事实上，location是一个很特别的对象，因为它既是window对象的属性，也是document对象的属性。</p>
<h4 id="3-1、location对象属性"><a href="#3-1、location对象属性" class="headerlink" title="3-1、location对象属性"></a>3-1、location对象属性</h4><ul>
<li><p>hash –返回url的锚部分（#后的部分），没有则返回空字符串。</p>
</li>
<li><p>host –返回url的主机名和端口</p>
</li>
<li><p>hostname –返回不带端口的url主机名</p>
</li>
<li><p>href –返回完整的url，location对象的toString()方法也返回这个值，也可以用来跳转页面。</p>
<pre class=" language-js"><code class="language-js">location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转网页</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取url</span></code></pre>
</li>
<li><p>pathname –返回url路径名</p>
</li>
<li><p>port –返回url服务器使用的端口号</p>
</li>
<li><p>protocol –返回一个url协议</p>
</li>
<li><p>search –返回一个url的查询字符串部分（？之后的部分）</p>
</li>
</ul>
<h4 id="3-2、location对象方法"><a href="#3-2、location对象方法" class="headerlink" title="3-2、location对象方法"></a>3-2、location对象方法</h4><ul>
<li>location.assign(url)：载入一个新的文档</li>
<li>location.reload()：重新载入当前文档</li>
<li>location.repalce(newurl)：用新的文档代替当前文档</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>打开百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、history对象"><a href="#4、history对象" class="headerlink" title="4、history对象"></a>4、history对象</h3><p>history保存了用户的上网记录，在有页面跳转的情况下，可以实现前后跳转。</p>
<p>go()方法的参数可以是数字，数字代表的是要访问的url在history的url列表中的相对位置（-1后退一个，-2后退两个，1向前一个，以此类推。）。参数也可以是一个字符串，字符串必须是局部或者完整的url，该方法会去匹配字符串的第一个url。</p>
<ul>
<li><p>向前跳转一个页面</p>
<pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法1</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span></code></pre>
</li>
<li><p>向后跳转一个页面</p>
<pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法1</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span>
</code></pre>
</li>
</ul>
<h3 id="5、navigator对象"><a href="#5、navigator对象" class="headerlink" title="5、navigator对象"></a>5、navigator对象</h3><p>该对象包含浏览器的相关信息，一般用在响应式布局中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"../H5/index.html"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//手机index文档所在目录</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"../PC/index.html"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PCindex文档所在目录</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6、body位置属性"><a href="#6、body位置属性" class="headerlink" title="6、body位置属性"></a>6、body位置属性</h3><h4 id="6-1、offset系列"><a href="#6-1、offset系列" class="headerlink" title="6-1、offset系列"></a>6-1、offset系列</h4><ul>
<li>获取元素的占位宽高<ul>
<li>元素.offsetWidth：width+padding+border</li>
<li>元素.offsetHeight：height+padding+border</li>
</ul>
</li>
<li>获取元素在页面的位置<ul>
<li>元素.offsetTop：当前元素的顶部，到定位父元素的距离（不包含父元素边框和父元素的外边距），没有定位父元素，则到body的距离。</li>
<li>元素.offsetLeft：当前元素的左部，到定位父元素的距离（不包含父元素边框和父元素的外边距），没有定位父元素，则到body的距离。</li>
</ul>
</li>
</ul>
<h4 id="6-2、client属性"><a href="#6-2、client属性" class="headerlink" title="6-2、client属性"></a>6-2、client属性</h4><ul>
<li>屏幕的可视宽高<ul>
<li>document.documentElement.clientWidth</li>
<li>document.documentElement.clientHeight</li>
</ul>
</li>
<li>元素可视宽高<ul>
<li>元素.clientWidth(width+padding)</li>
<li>元素.clientHeight(height+padding)</li>
</ul>
</li>
<li>元素边框<ul>
<li>元素.clientTop(元素本身上边框高度)</li>
<li>元素.clientLeft(元素本身左边框高度)</li>
</ul>
</li>
</ul>
<h4 id="6-3、scroll系列"><a href="#6-3、scroll系列" class="headerlink" title="6-3、scroll系列"></a>6-3、scroll系列</h4><p>Google认为scroll是属于body的，其他浏览器认为scroll是html的，所以存在兼容问题。</p>
<ul>
<li><p>滚动事件</p>
<p>window.onscroll：滚动条滚动的时候调用</p>
</li>
<li><p>屏幕的滚动距离，页面被卷去的高度</p>
<ul>
<li>document.documentElement.scrollTop</li>
<li>document.body.scrollTop</li>
</ul>
</li>
<li><p>元素的滚动</p>
<ul>
<li>元素.scrollTop：被卷去的高</li>
<li>元素.scrollLeft：被卷去的宽</li>
<li>元素.scrollWidth：获取元素实际内容宽（元素宽度-滚动条宽度）</li>
<li>元素.scrollHeight：获取元素实际内容高（包括被滚动条卷走的高度）</li>
</ul>
</li>
</ul>
<h3 id="7、图片懒加载"><a href="#7、图片懒加载" class="headerlink" title="7、图片懒加载"></a>7、图片懒加载</h3><p>图片懒加载是指先只加载可视窗口区域的图片，当用户向下拖动滚动条时再加载后面显示出来的图片。</p>
<ul>
<li>这样减少了加载时的线程数量，使可视区域内的图片也能快速加载，优化了用户体验。</li>
<li>减少了同一时间向服务器发出的请求数量，服务器压力剧减。</li>
</ul>
<p>方法：在写网页<img>标签时先不将图片的路径放入src属性，而是自定义一个其他属性data_src，将图片路径放入到这个自定义的属性中，在加载页面时，这个图片一开始是无法加载的，当浏览器的可视区域移动到此图片上来时，将data_src中的路径赋值给src属性，图片开始加载出来。</p>
<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data_src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./images/background-image.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data_src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./images/background-image.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 ...
</code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录图片被加载的数量，每次遍历从没有加载的图片开始加载</span>
<span class="token comment" spellcheck="true">//当打开界面时先加载当前可视区的图片</span>
<span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//滚轮事件绑定懒加载函数</span>
window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> lazyLoad<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> tag<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//获取可视窗口高度</span>
        <span class="token keyword">var</span> seeHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取被滚动条卷走的高度</span>
        <span class="token keyword">var</span> scrollHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//比较图片距离文档顶部的距离是否小于可是高度与被卷高度和，如果小于说明图片进入了可视区域</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> seeHeight <span class="token operator">+</span> scrollHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//判断图片路径是否为空，若为空则给src赋值</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//将图片路径赋给src</span>
                img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data_src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//被加载的图片数量+1</span>
                tag <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>e
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="8、resize事件"><a href="#8、resize事件" class="headerlink" title="8、resize事件"></a>8、resize事件</h3><p>当屏幕发生变化时不间断的调用。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM操作</title>
    <url>/posts/a33b.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第九章-DOM操作"><a href="#第九章-DOM操作" class="headerlink" title="第九章 DOM操作"></a>第九章 DOM操作</h2><h3 id="1、DOM"><a href="#1、DOM" class="headerlink" title="1、DOM"></a>1、DOM</h3><p>Document Object Model，文档对象模型，是W3C组织推荐的处理可拓展性语言的标准编程接口。在网页上，组织页面（文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型称为DOM，如标签、文本、属性等。</p>
<h3 id="2、节点"><a href="#2、节点" class="headerlink" title="2、节点"></a>2、节点</h3><h4 id="2-1、节点介绍"><a href="#2-1、节点介绍" class="headerlink" title="2-1、节点介绍"></a>2-1、节点介绍</h4><p>在加载HTML页面时，web浏览器生成一个树型结构，用来表示页面内部结构，称为DOM树，DOM将这种树型结构解释为由节点组成。</p>
<ul>
<li><p>整个文档时一个文档节点</p>
<p>DOM中的根节点，是文档内其他节点的访问入口，提供了操作其他节点的方法。</p>
</li>
<li><p>每个HTML元素是元素节点</p>
</li>
<li><p>HTML元素内的文本是文本节点</p>
</li>
<li><p>每个HTML属性是属性节点</p>
</li>
<li><p>注释是注释节点</p>
</li>
</ul>


<h4 id="2-2、节点基本属性"><a href="#2-2、节点基本属性" class="headerlink" title="2-2、节点基本属性"></a>2-2、节点基本属性</h4><ul>
<li><p>nodeType</p>
<p>表示节点的类型，只读，节点类型由在Node类型中定义的数值常量来表示，比较重要的节点类型如下：</p>
<ul>
<li>元素–1</li>
<li>属性–2</li>
<li>文本–3</li>
<li>注释–8</li>
<li>文档–9</li>
</ul>
</li>
<li><p>nodeName</p>
<p>节点的名称，只读。</p>
<ul>
<li>元素节点的nodeName与标签名相同，且都均为大写。</li>
<li>属性节点的nodeName与属性名相同。</li>
<li>文本节点的nodeName始终是#text。</li>
<li>文档节点的nodeName始终是#document。</li>
</ul>
</li>
<li><p>nodeValue</p>
<p>该属性规定节点的值。</p>
<ul>
<li><p>元素节点的nodeValue是undefined或null。</p>
</li>
<li><p>文本节点的nodeValue是文本本身。</p>
</li>
<li><p>属性节点的nodeValue是属性值。</p>
<ul>
<li><p>获取属性节点：DOM元素.getAttribute(“属性名称”)，该方式可以获取自定义属性，可以直接用class获取而不是className。</p>
</li>
<li><p>设置属性节点：DOM元素.setAttribute(“属性名称”,“属性值”)，就是直接修改标签属性。</p>
</li>
<li><p>移除属性节点：DOM.removeAttribute(‘属性名称’)，直接删除标签属性。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3、获取节点"><a href="#3、获取节点" class="headerlink" title="3、获取节点"></a>3、获取节点</h3><h4 id="3-1、获取子节点"><a href="#3-1、获取子节点" class="headerlink" title="3-1、获取子节点"></a>3-1、获取子节点</h4><ul>
<li><p>父节点.children</p>
<p>只返回子元素（标签）节点集合，该属性为非标准属性。</p>
<p>IE8及以下浏览器支持该属性，但返回节点集合中除了元素节点还包含注释节点。</p>
</li>
<li><p>父节点.childNodes</p>
<p>返回子节点集合，包括标签、文本、属性节点。</p>
<p>对于元素间的空格，IE8及以下版本不会返回文本节点。</p>
</li>
</ul>
<h4 id="3-2、获取父节点"><a href="#3-2、获取父节点" class="headerlink" title="3-2、获取父节点"></a>3-2、获取父节点</h4><ul>
<li><p>元素.parentNode</p>
<p>指向文档树中的父节点，只获取一个直接父元素。</p>
</li>
<li><p>元素.offsetParent</p>
<p>指向离当前元素最近的有定位属性的父级元素，如果没有定位的父级，则指向body。</p>
</li>
</ul>
<h4 id="3-3、其他节点"><a href="#3-3、其他节点" class="headerlink" title="3-3、其他节点"></a>3-3、其他节点</h4><ul>
<li><h5 id="获取父元素的首节点"><a href="#获取父元素的首节点" class="headerlink" title="获取父元素的首节点"></a>获取父元素的首节点</h5><ul>
<li><p>父元素.firstChild</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>父元素.firstElementChild</p>
<p>只获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取父元素的尾节点"><a href="#获取父元素的尾节点" class="headerlink" title="获取父元素的尾节点"></a>获取父元素的尾节点</h5><ul>
<li><p>父元素.lastChild</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>父元素.lastElementChild</p>
<p>只获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取元素的下一个兄弟节点"><a href="#获取元素的下一个兄弟节点" class="headerlink" title="获取元素的下一个兄弟节点"></a>获取元素的下一个兄弟节点</h5><ul>
<li><p>元素.nextSibling</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>元素.nextElementSibling</p>
<p>只能获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取元素的上一个兄弟节点"><a href="#获取元素的上一个兄弟节点" class="headerlink" title="获取元素的上一个兄弟节点"></a>获取元素的上一个兄弟节点</h5><ul>
<li><p>元素.previousSibling</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>元素.previousSibling</p>
<p>只能获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
</ul>
<p>以上四种方法均存在兼容问题，解决方法如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> first <span class="token operator">=</span> box<span class="token punctuation">.</span>firstElementChild <span class="token operator">||</span> box<span class="token punctuation">.</span>firstChild
<span class="token keyword">var</span> last <span class="token operator">=</span> box<span class="token punctuation">.</span>lastElementChild <span class="token operator">||</span> box<span class="token punctuation">.</span>lastChild
<span class="token keyword">var</span> next <span class="token operator">=</span> box<span class="token punctuation">.</span>nextElementSibling <span class="token operator">||</span> box<span class="token punctuation">.</span>nextSibling
<span class="token keyword">var</span> previous <span class="token operator">=</span> box<span class="token punctuation">.</span>previousElementSibling <span class="token operator">||</span> box<span class="token punctuation">.</span>previousSiblng</code></pre>
<h3 id="4、操作节点"><a href="#4、操作节点" class="headerlink" title="4、操作节点"></a>4、操作节点</h3><h4 id="4-1、创建节点"><a href="#4-1、创建节点" class="headerlink" title="4-1、创建节点"></a>4-1、创建节点</h4><ul>
<li><p>document.createElement(“标签名”)</p>
<p>该方法接收一个字符串标签名，返回一个标签对象的引用。</p>
</li>
<li><p>document.createTextNode(“文本”)</p>
<p>该方法创建一段文本，返回文本对象的引用。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建标签节点</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建文本节点</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'创建的文本节点'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//将文本添加到标签内</span>
p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//将标签添加到页面中</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//但是更多情况下，是直接用标签的innerHTML属性来添加内容，一步可以代替上面的2、3两步</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'innerHTML方法添加的内容'</span><span class="token punctuation">;</span></code></pre>
<h4 id="4-2、追加节点"><a href="#4-2、追加节点" class="headerlink" title="4-2、追加节点"></a>4-2、追加节点</h4><ul>
<li><p>父元素.appendChild(子节点)</p>
<p>用于向父元素的末尾添加一个节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'追加的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//li添加到ul的尾部</span></code></pre>
<h4 id="4-3、插入节点"><a href="#4-3、插入节点" class="headerlink" title="4-3、插入节点"></a>4-3、插入节点</h4><ul>
<li><p>父元素.insertBefore(要插入的节点，参考的节点)</p>
<p>该方法接收两个参数，要插入的节点和作为参照的节点，插入节点后，被插入的节点会变成参照节点的前一个兄弟节点，同时被方法返回。没有子元素时以文本节点为参考。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'插入的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入到第二个li的前面，成为了新的第二个li，原第二个标签成为了第三个</span></code></pre>
<h4 id="4-4、删除节点"><a href="#4-4、删除节点" class="headerlink" title="4-4、删除节点"></a>4-4、删除节点</h4><ul>
<li><p>父元素.removeChild(被删除的元素)</p>
<p>该方法接收一个参数，要删除的节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个li被删除</span></code></pre>
<h4 id="4-5、替换节点"><a href="#4-5、替换节点" class="headerlink" title="4-5、替换节点"></a>4-5、替换节点</h4><ul>
<li><p>父元素.replaceChild(新的节点，被替换的节点)</p>
<p>该方法接收两个参数，要插入的节点和被替换的节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个li被新的标签替换掉</span></code></pre>
<p>如果是用已经存在的节点去替换，已存在的节点会直接从原有位置上消失，在被替换节点的位置覆盖被替换的节点。</p>
<h4 id="4-6、复制节点"><a href="#4-6、复制节点" class="headerlink" title="4-6、复制节点"></a>4-6、复制节点</h4><ul>
<li><p>被复制的节点.cloneNode(布尔值)</p>
<p>该方法拷贝节点并返回节点副本，接收一个布尔值参数，即是否需要克隆所有后代，默认值是false，只复制标签，不复制内容或子代；true表示复制标签中所有子代。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newUl<span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newUl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复制一个ul标签，包含其所有原有的内容</span></code></pre>
<p><strong>如果使用这种方式复制节点，需要使用getElementsByTagName()动态获取元素，不然可能存在获取不到被复制的节点的情况。</strong></p>
<blockquote>
<p>注意：以上操作节点，除了创建和复制节点，其他方法均通过父元素操作，使用时分清所在位置。如删除节点中的父元素应该是被删除元素的父元素，而删除事件的操作元素可能是被删除元素的子元素。</p>
</blockquote>
<h3 id="5、DOM操作表格"><a href="#5、DOM操作表格" class="headerlink" title="5、DOM操作表格"></a>5、DOM操作表格</h3><h4 id="5-1、获取表格元素"><a href="#5-1、获取表格元素" class="headerlink" title="5-1、获取表格元素"></a>5-1、获取表格元素</h4><p>DOM提供了可以简便快速获取表格元素的属性，先获取到表格table对象，再通过table获取里面的元素。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>sum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取thead，返回thead</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;thead>...&lt;/thead></span>
<span class="token comment" spellcheck="true">//获取tbody，返回一个集合tbody集合</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tBodies<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection[tbody]</span>
<span class="token comment" spellcheck="true">//获取tfood，返回tfoot</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tFoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;tfoot>...&lt;/tfoot></span>
<span class="token comment" spellcheck="true">//获取所有行，返回一个行集合，包括thead和tfoot中的行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection(3)[tr,tr,tr]</span>
<span class="token comment" spellcheck="true">//获取指定的行，此处获取第一个tbody中的行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tBodies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCoolection[tr]</span>
<span class="token comment" spellcheck="true">//获取单元格，只能通过固定行获取，返回一个集合</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cells<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection(4)[th][th][th][th]</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-this详解及函数初识</title>
    <url>/posts/f835.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第四章-this详解及函数初识"><a href="#第四章-this详解及函数初识" class="headerlink" title="第四章 this详解及函数初识"></a>第四章 this详解及函数初识</h2><h3 id="1、this"><a href="#1、this" class="headerlink" title="1、this"></a>1、this</h3><ul>
<li><p>在方法中，this表示该方法所属的对象本身。（对象中的函数称为方法）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    fn<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：{name:'张三',fn:function()}，说明这里的this是obj对象本身。</span></code></pre>
</li>
<li><p>如果单独使用，this表示全局对象。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：Window</span></code></pre>
</li>
<li><p>在函数中，this表示全局对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：Window</span></code></pre>
</li>
<li><p>在函数中，在严格模式下，this是未定义的(undefined)。</p>
<pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//结果是：undefined</span></code></pre>
<blockquote>
<p>补充：严格模式</p>
<blockquote>
<p>定义：严格模式是指在严格的条件下运行js代码，在ECMAScript5引入，通过在脚本或函数的头部添加“use strict”来声明。    </p>
</blockquote>
<blockquote>
<p>好处：</p>
<ul>
<li>消除语法的不合理、不严谨之处，保证代码的运行安全。</li>
<li>提高编译器效率，增加运行速度。</li>
<li>为未来新版本的js做铺垫。  </li>
</ul>
</blockquote>
<blockquote>
<p>限制：</p>
<ul>
<li>不允许使用未声明的变量。</li>
<li>不允许对变量或函数使用delete操作符。</li>
<li>不允许重命名变量。</li>
<li>不允许使用八进制。</li>
<li>抛弃with语句。</li>
<li>不可对只读对象赋值，不可对不可配置对象使用delete操作符。</li>
<li>禁止this关键字指向全局对象。</li>
<li>不可再if内部声明函数。</li>
<li>不允许使用转义字符。</li>
<li>不允许对一个使用getter方法读取的属性进行赋值。</li>
<li>不允许删除一个不允许删除的属性。</li>
<li>变量不能使用“eval、arguments”字符串。</li>
<li>在作用域eval()创建的变量不能被调用。</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>在事件中，this指向了接收事件的HTML元素，即触发事件的对象。</p>
</li>
<li><p>在call()、apply()、bind()三个函数对象的方法中，允许切换函数执行的上下文环境，即this绑定的对象，所以他们可以将this指向任何地方。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>
    age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>
    objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>
    objFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fm<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token string">'来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">"去往"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">99</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都, 上海去往undefined</span>

<span class="token comment" spellcheck="true">/*从上面四个结果不难看出:

bind 返回的是一个新的函数，方法后面多了个 () ，必须调用它才会被执行。

call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：

call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。

apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。

bind 除了返回是函数以外，它的参数和 call 一样。

当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！*/</span></code></pre>
</li>
</ul>
<h3 id="2、自定义属性"><a href="#2、自定义属性" class="headerlink" title="2、自定义属性"></a>2、自定义属性</h3><p>自定义属性是指给标签添加已有属性以外的属性，例如div标签的id、class这些属性都是已有的，如果再添加一个tag属性，就是我们自定义的。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token punctuation">></span></span>box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//无法直接获取在标签内直接定义的自定义属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
div<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//可以获取在js中定义的自定义属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<h3 id="3、自定义索引（下标）"><a href="#3、自定义索引（下标）" class="headerlink" title="3、自定义索引（下标）"></a>3、自定义索引（下标）</h3><p>索引一般与下标一一对应，但是下标并不是标签本身的属性，只是标签所在集合的属性，所以要通过自定义下标来保存标签的实际下标，一般通过for循环。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> div<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre>
<h3 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h3><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。先声明，后调用。</p>
<h4 id="4-1、函数声明"><a href="#4-1、函数声明" class="headerlink" title="4-1、函数声明"></a>4-1、函数声明</h4><ul>
<li><p>function直接声明</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>表达式声明/匿名函数赋值给变量</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>有名函数赋值给变量</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>Function构造器构造函数（不推荐）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">"alert(a+b)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<p> <strong><code>Function</code> 构造函数</strong>创建一个新的 <code>Function</code> <strong>对象</strong>。直接调用此构造函数可用动态创建函数，但会遇到和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/eval"><code>eval</code></a> 类似的的安全问题和(相对较小的)性能问题。然而，与 <code>eval</code> 不同的是，<code>Function</code> 创建的函数只能在全局作用域中运行。</p>
<ul>
<li><p>匿名函数</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//匿名函数直接使用会报错，因为js规定函数声明function后面必需有函数名或者匿名函数使用表达式赋给变量。</span>
<span class="token comment" spellcheck="true">//解决方法是将匿名函数变成为自执行函数，将其用括号括起来，后面加()代表函数调用，其前面加上;或~防止被前面没加;的代码影响。</span></code></pre>
</li>
</ul>
<h4 id="4-2、函数调用"><a href="#4-2、函数调用" class="headerlink" title="4-2、函数调用"></a>4-2、函数调用</h4><p>函数名()</p>
<h4 id="4-3、函数的参数"><a href="#4-3、函数的参数" class="headerlink" title="4-3、函数的参数"></a>4-3、函数的参数</h4><ul>
<li><p>形参</p>
<p>函数声明时定义的参数，实际就是一个未赋值的变量。</p>
</li>
<li><p>实参</p>
<p>函数调用时传入的实际参数，多个参数时用逗号隔开。</p>
</li>
</ul>
<p>js函数中的参数类型可以是js数据类型中的任何一个，但是null和undefined作为参数没有任何意义而且有时还会报错，因此基本不会将这两个作为参数。</p>
<h4 id="4-4、arguments"><a href="#4-4、arguments" class="headerlink" title="4-4、arguments"></a>4-4、arguments</h4><p>当参数不一定的时候，可以选择不设置形参，而是在函数内部通过获取arguments得到实参，然后再进行操作。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span></code></pre>
<p>arguments可以改变实参的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<p>如果形参名与函数内局部变量名相同，后面的会覆盖前面的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//1 1</span>
<span class="token comment" spellcheck="true">//3 3</span></code></pre>
<h3 id="5、函数中的问题"><a href="#5、函数中的问题" class="headerlink" title="5、函数中的问题"></a>5、函数中的问题</h3><ul>
<li>同名的函数，后面的函数会覆盖前面的函数。</li>
<li>实参给形参赋值时从左往右，实参可以比形参多也可以比形参少，如果实参比形参少，未赋值的参数为undefined。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-事件</title>
    <url>/posts/b93.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第十一章-事件"><a href="#第十一章-事件" class="headerlink" title="第十一章 事件"></a>第十一章 事件</h2><h3 id="1、事件基础"><a href="#1、事件基础" class="headerlink" title="1、事件基础"></a>1、事件基础</h3><p>HTML事件是发生在HTML元素上的事情，是可以被JavaScript侦测到的行为。</p>
<h4 id="1-1、事件函数"><a href="#1-1、事件函数" class="headerlink" title="1-1、事件函数"></a>1-1、事件函数</h4><p>当事件被触发时调用的函数。</p>
<h4 id="1-2、事件对象"><a href="#1-2、事件对象" class="headerlink" title="1-2、事件对象"></a>1-2、事件对象</h4><p>当事件发生时候，浏览器会将事件相关信息保存在内置全局对象window.event中（window可以省略），包括事件类型、操作对象、鼠标位置等。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//由于事件对象是事件触发时由js底层将实参数据保存在window.event对象中，因此需要在功能函数中加上形参来接收事件对象。</span>
document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//console(e);//标准浏览器</span>
    <span class="token comment" spellcheck="true">//console(event);//兼容ie低版本，非标准浏览器没有实参只能通过window.event</span>
    <span class="token comment" spellcheck="true">//兼容写法</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>事件对象中比较重要的属性：</p>
<ul>
<li><p>type：事件类型</p>
</li>
<li><p>target：获取事件源</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//事件源也存在兼容问题，target在ie低版本中无效，需要使用srcElement进行兼容处理</span>
document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li><p>clientX、clientY</p>
<p>鼠标位置坐标，相对于浏览器可视窗口的坐标</p>
</li>
<li><p>pageX、pageY</p>
<p>鼠标位置坐标，相对于浏览器文档（即包括被滚动条卷走的部分）</p>
</li>
<li><p>screenX、screenY</p>
<p>鼠标位置坐标，相对于屏幕</p>
</li>
</ul>
<h3 id="2、事件绑定"><a href="#2、事件绑定" class="headerlink" title="2、事件绑定"></a>2、事件绑定</h3><ul>
<li><p>注册事件</p>
<p>元素.事件</p>
<pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>该方式添加事件有一个弊端，如果给一个元素添加多个相同的事件，后面的事件会覆盖前面的事件。</p>
</li>
<li><p>注册事件取消</p>
<pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>事件监听绑定事件</p>
<p>标准浏览器：元素.addEventListener(事件类型(不加on)，事件处理函数，是否捕获)。默认false冒泡，true捕获。</p>
<p>非标准浏览器（ie8及以下）：元素.attachEvent(事件类型(加on)，事件函数)。没有第三个参数，只有冒泡，没有捕获（如果需要捕获需要通过其他方法设置）。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//事件绑定封装</span>
<span class="token keyword">function</span> <span class="token function">addEventL</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>标准浏览器的事件绑定和非标准浏览器的事件绑定的区别：</p>
<ul>
<li>非标准浏览器没有捕获，标准浏览器有捕获。</li>
<li>非标准浏览器的事件名称前面有on，标准浏览器没有。</li>
<li>非标准浏览器的this是window，标准浏览器的是触发这个事件的对象。</li>
</ul>
</li>
<li><p>事件监听取消</p>
<p>标准浏览器和非标准浏览器的绑定方法不一样，取消绑定的方法也不一样。</p>
<ul>
<li>标准浏览器：元素.removeEventListener(事件类型(不加on)，执行函数，false)</li>
<li>非标准浏览器：元素.detachEvent(事件类型(加on)，执行函数)</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//解除绑定兼容处理封装</span>
<span class="token keyword">function</span> <span class="token function">delEventL</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eNname<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="3、DOM事件流"><a href="#3、DOM事件流" class="headerlink" title="3、DOM事件流"></a>3、DOM事件流</h3><p>事件发生时会在元素节点与根节点之间按特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程就是DOM事件流。</p>
<h4 id="3-1、DOM事件流三阶段："><a href="#3-1、DOM事件流三阶段：" class="headerlink" title="3-1、DOM事件流三阶段："></a>3-1、DOM事件流三阶段：</h4><ul>
<li>事件捕获阶段：事件从最不具体的元素到最具体的元素进行传播，即从DOM的根节点往目标节点传播。</li>
<li>确定目标阶段：事件达到目标元素。</li>
<li>事件冒泡阶段：事件从最具体的元素到最不具体的元素进行传播，即从目标元素往DOM根节点处传播。</li>
</ul>
<h4 id="3-2、事件流分为冒泡事件流和捕获事件流"><a href="#3-2、事件流分为冒泡事件流和捕获事件流" class="headerlink" title="3-2、事件流分为冒泡事件流和捕获事件流"></a>3-2、事件流分为冒泡事件流和捕获事件流</h4><ul>
<li><p>冒泡事件流</p>
<p>当addEventListener()第三个参数为false时，或非标准浏览器的默认事件流，都是冒泡事件流。</p>
<p>冒泡事件流的元素事件在事件冒泡阶段发生。</p>
</li>
<li><p>捕获事件流</p>
<p>当addEventListener()第三个参数为true时，是捕获事件流。</p>
<p>捕获事件流的元素事件在事件捕获阶段发生。</p>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    div1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        div2
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            div3
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js">box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//点击div4时，结果如下图。</span>
<span class="token comment" spellcheck="true">//分析：根据DOM事件流，点击事件从进行捕获阶段div1到div4，到达目标div4之后，再进行冒泡阶段从div4到div1。</span>
<span class="token comment" spellcheck="true">//由于div1和div4支持捕获，而div2和div3支持冒泡（默认false为冒泡），所以div1和div4的点击事件在捕获阶段发生，而div3和div2的点击事件在冒泡阶段发生。</span></code></pre>
<img src="/posts/b93/11-1.png" class="">

<p>注意：事件流到达目标阶段后将不再往子节点传播，即点击div3时，事件流达到div3后往根节点冒泡，达不到div4，所以div4的点击事件不会发生。</p>
<img src="/posts/b93/11-2.png" class="">

<h4 id="3-3、阻止冒泡事件"><a href="#3-3、阻止冒泡事件" class="headerlink" title="3-3、阻止冒泡事件"></a>3-3、阻止冒泡事件</h4><p>阻止冒泡事件是指：子元素接收到事件后，阻止子元素再给父元素传播事件。</p>
<ul>
<li><p>标准浏览器：事件对象.stopPropagration();</p>
</li>
<li><p>非标准浏览器：事件.cancelBubble = true;</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="4、事件默认行为"><a href="#4、事件默认行为" class="headerlink" title="4、事件默认行为"></a>4、事件默认行为</h3><p>事件的默认行为，即赋予了元素特殊的操作，如点击链接会跳转到其他的网页，在浏览器中右击鼠标会弹出菜单，当我们不需要这些默认行为的时候，可以手动阻止。</p>
<ul>
<li>元素.事件添加的事件：return false</li>
<li>元素.addEventListener()：e.preventDefault()</li>
<li>元素.attachEvent()：e.returnValue = false</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="5、键盘事件"><a href="#5、键盘事件" class="headerlink" title="5、键盘事件"></a>5、键盘事件</h3><p>常用键盘事件如下，当一个键盘被按下的时候，事件发生次序如下：</p>
<ul>
<li>onkeydown：键盘按下</li>
<li>onkeypress：键盘按下（但是该事件不适用于alt、shift，ctrl、esc等键盘。）</li>
<li>onkeyup：键盘抬起</li>
</ul>
<p>常用属性如下：</p>
<ul>
<li><p>e.keyCode：返回按键对应键位的键值</p>
<p>常用键值为：</p>
<ul>
<li>左上右下：37、38、39、40</li>
<li>Enter：13</li>
<li>Shift：16</li>
<li>Control：17</li>
<li>Alt：18</li>
</ul>
</li>
<li><p>key：返回具体的键名称（ie8以下不支持）</p>
</li>
<li><p>shiftKey：判断shift键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>ctrlKey：判断ctrl键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>altKey：判断alt键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>metaKey：判断meta键（window键）是否按下，是则返回true否则返回false，ie所有版本都不支持。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>altKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="6、滚轮事件"><a href="#6、滚轮事件" class="headerlink" title="6、滚轮事件"></a>6、滚轮事件</h3><p>鼠标中间的滚轮滚动时，js也能监听到，称为滚轮事件。</p>
<h4 id="6-1、添加滚轮事件"><a href="#6-1、添加滚轮事件" class="headerlink" title="6-1、添加滚轮事件"></a>6-1、添加滚轮事件</h4><p>添加滚轮事件中火狐与其他浏览器有所区别：</p>
<ul>
<li>标准和非标准浏览器：元素.onmousewheel = fun;//可以使用传统方式绑定事件或者使用事件监听绑定</li>
<li>火狐：元素.addEventListener(‘DOMMouseScroll’,fun,false);//火狐只能使用事件监听方式</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">addMousewheel</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eName<span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>fun<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//标准和非标准</span>
<span class="token function">addMousewheel</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token string">'mousewheel'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//火狐</span>
<span class="token function">addMousewheel</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token string">'DOMMouseScroll'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="6-2、获取滚轮信息"><a href="#6-2、获取滚轮信息" class="headerlink" title="6-2、获取滚轮信息"></a>6-2、获取滚轮信息</h4><p>滚轮可以上下滚动，滚动方向的信息都存储在对象事件的一个属性中，火狐和其他浏览器有不同的写法。</p>
<ul>
<li>标准和非标准：e.wheelDetal    向上滚动120、向下滚动-120（不同浏览器可能值不一样）</li>
<li>火狐：e.detail    向上滚动-3，向下滚动3</li>
</ul>
<p>由于不同浏览器值不一样，并且快速滚动滚轮时值可能加倍，所以不能用确定值来判断滚动方向，一般用是否大于0来判断。且由于火狐于其他浏览器在滚轮不同方向的值正负不一样，所以一般在判断时乘以-1使其方向相同。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">wheelDelta</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="7、事件委托-事件代理"><a href="#7、事件委托-事件代理" class="headerlink" title="7、事件委托/事件代理"></a>7、事件委托/事件代理</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类的所有事件。</p>
<p>解决的问题：在一类元素中，如果新添加了一个元素，之前添加的事件在该元素上无效，需要重新添加，或者重新获取所有元素。</p>
<p>实现：将事件添加到父元素上，当事件发生时，父元素会找到对应触发事件的子元素去处理，后期添加的子元素依然有该事件。通常结合子元素的nodeName属性对子元素进行判断。</p>
<p>原理：冒泡原理，当里层元素做点击事件的时候，都会冒到外层父元素中，父元素中点击事件的功能都将实现。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> darkkhaki<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//案例：通过给ul添加点击事件，当点击子元素li时，相应li的背景色变红。</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>scrElement
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">==</span> <span class="token string">'LI'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后期添加的子元素依然有效</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-初识</title>
    <url>/posts/4160.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第一章-JavaScript初识"><a href="#第一章-JavaScript初识" class="headerlink" title="第一章 JavaScript初识"></a>第一章 JavaScript初识</h2><h3 id="1、JavaScript介绍"><a href="#1、JavaScript介绍" class="headerlink" title="1、JavaScript介绍"></a>1、JavaScript介绍</h3><h4 id="1-1、什么是JavaScript？"><a href="#1-1、什么是JavaScript？" class="headerlink" title="1-1、什么是JavaScript？"></a>1-1、什么是JavaScript？</h4><p>JavaScript是一种具有面向对象能力的、解释型的弱类型程序设计语言，是基于对象和事件驱动的并且具有相对安全性的、可跨平台的客户端脚本语言。（不需要在一个语言环境下运行，而只需要支持它的浏览器即可，浏览器可以直接解析js代码。）</p>
<h4 id="1-2、JavaScript的组成？"><a href="#1-2、JavaScript的组成？" class="headerlink" title="1-2、JavaScript的组成？"></a>1-2、JavaScript的组成？</h4><ul>
<li>核心(ECMAScript)</li>
<li>文档流对象(DOM)</li>
<li>浏览器对象模型(BOM)</li>
</ul>
<h4 id="1-3、JavaScript的特点"><a href="#1-3、JavaScript的特点" class="headerlink" title="1-3、JavaScript的特点"></a>1-3、JavaScript的特点</h4><ul>
<li>解释性</li>
<li>基于对象</li>
<li>事件驱动</li>
<li>跨平台</li>
</ul>
<h4 id="1-4、JavaScript的作用"><a href="#1-4、JavaScript的作用" class="headerlink" title="1-4、JavaScript的作用"></a>1-4、JavaScript的作用</h4><ul>
<li>客户端云计算</li>
<li>客户端表单合法验证</li>
<li>浏览器对象的调用</li>
<li>浏览器事件的触发</li>
<li>网页特殊显示效果制作</li>
<li>…</li>
</ul>
<h3 id="2、JavaScript引入方式"><a href="#2、JavaScript引入方式" class="headerlink" title="2、JavaScript引入方式"></a>2、JavaScript引入方式</h3><ul>
<li>行间引入，在标签内部使用js代码，不建议使用。</li>
<li>通过script标签内嵌JavaScript代码，一般放在head标签中或body标签末尾，建议放在body标签末尾。</li>
<li>通过script标签的src属性外链js文件。</li>
</ul>
<blockquote>
<p>js操作a标签时比较特殊，代码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">'javascript:;'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
</blockquote>
<h3 id="3、JavaScript注释"><a href="#3、JavaScript注释" class="headerlink" title="3、JavaScript注释"></a>3、JavaScript注释</h3><ul>
<li>单行注释：//</li>
<li>多行注释：/**/</li>
</ul>
<h3 id="4、JavaScript入门"><a href="#4、JavaScript入门" class="headerlink" title="4、JavaScript入门"></a>4、JavaScript入门</h3><h4 id="4-1、入门三部曲"><a href="#4-1、入门三部曲" class="headerlink" title="4-1、入门三部曲"></a>4-1、入门三部曲</h4><ul>
<li>谁？哪个标签</li>
<li>事？触发了什么事件</li>
<li>做？事件触发之后做了什么事</li>
</ul>
<h4 id="4-2、window-onload"><a href="#4-2、window-onload" class="headerlink" title="4-2、window.onload"></a>4-2、window.onload</h4><p>window.onload的作用是，当文档和资源都加载完成后执行里面的代码。</p>
<p>当我们把script标签放到head里面去获取元素的时候，会发现获取到的值为null，是因为代码从上往下执行，当获取标签的时候，标签还没有被加载。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre>
<p>window.onload每个页面只能出现一次，如果重复，后面的会覆盖前面的，如果window.onload之外的内容多，如页面图片资源过大会导致页面等待时间过长，用户体验差。</p>
<p>更优质的方法是使用事件监听，当页面结构(HTML)加载完成后加载监听事件，可以出现多次。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="4-3、js的鼠标事件"><a href="#4-3、js的鼠标事件" class="headerlink" title="4-3、js的鼠标事件"></a>4-3、js的鼠标事件</h4><ul>
<li>onclick    单击事件</li>
<li>ondblclick    双击事件</li>
<li>onmouseover    移入事件（支持冒泡）</li>
<li>onmouseout    移出事件（支持冒泡）</li>
<li>onmouseenter    鼠标移入事件（不支持冒泡）</li>
<li>onmouseleave    鼠标移出事件（不支持冒泡）</li>
<li>onmousedown    鼠标按下事件</li>
<li>onmouseup    鼠标松开事件</li>
<li>onmousemove    鼠标移动事件</li>
<li>oncontentmenu    右键菜单事件</li>
</ul>
<h3 id="5、JavaScript变量"><a href="#5、JavaScript变量" class="headerlink" title="5、JavaScript变量"></a>5、JavaScript变量</h3><h4 id="5-1、定义方式"><a href="#5-1、定义方式" class="headerlink" title="5-1、定义方式"></a>5-1、定义方式</h4><p>使用var关键字声明。</p>
<ul>
<li><p>1）声明的同时赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>2）同时定义多个变量并赋值，每个变量之间用逗号隔开。</p>
<pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> </code></pre>
</li>
<li><p>同时定义多个变量，并且分别赋值，每个变量之间用逗号隔开。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<p>注意：变量要先声明（定义+赋值）后使用。</p>
<h4 id="5-2、变量的命名规则"><a href="#5-2、变量的命名规则" class="headerlink" title="5-2、变量的命名规则"></a>5-2、变量的命名规则</h4><ul>
<li>只能以数字、字母、下划线、$开头。</li>
<li>不能以数字开头。</li>
<li>不能使用关键字、保留字（现在不是关键字但以后可能成为关键字）。</li>
<li>具有语义化，见名知义。</li>
<li>采用驼峰命名法。</li>
</ul>
<h3 id="6、JavaScript调试语句"><a href="#6、JavaScript调试语句" class="headerlink" title="6、JavaScript调试语句"></a>6、JavaScript调试语句</h3><ul>
<li><p>alert()</p>
<p>js自带的弹出框，具有阻塞作用，只在测试语句时使用。</p>
</li>
<li><p>console.log()</p>
<p>在控制台打印数据，一次可以多个，并且不会阻塞。</p>
</li>
<li><p>prompt()</p>
<p>用于显示可提示用户进行输入的对话框，也具有阻塞作用。</p>
</li>
</ul>
<h3 id="7、JavaScript获取元素"><a href="#7、JavaScript获取元素" class="headerlink" title="7、JavaScript获取元素"></a>7、JavaScript获取元素</h3><ul>
<li><p>document.getElementById()</p>
<p>通过id值获取，只返回一个元素。</p>
</li>
<li><p>document.getElementsByTagName()</p>
<p>通过标签名称获取，获取的标签会形成一个伪数组返回（即使只有一个元素也是返回一个集合），使用其中的具体标签时，需要加下标。</p>
</li>
<li><p>document.getElementsByClassName()</p>
<p>通过类名称获取，获取的标签会形成一个伪数组返回（即使只有一个元素也是返回一个集合），使用其中的具体标签时，需要加下标。</p>
</li>
<li><p>document.querySelector()</p>
<p>该方法接收一个css选择符(与css中如何书写选择符规则相同，如：.nav li &gt; p)，只返回匹配的第一个元素。</p>
</li>
<li><p>document.querySelectorAll()</p>
<p>该方法也是接收一个css选择符，但是返回的是符合匹配的所有元素集合。</p>
</li>
</ul>
<h3 id="8、JavaScript操作元素内容"><a href="#8、JavaScript操作元素内容" class="headerlink" title="8、JavaScript操作元素内容"></a>8、JavaScript操作元素内容</h3><ul>
<li><p>操作表单元素</p>
<p>获取表单元素：表单元素.value</p>
<p>设置表单元素：表单元素.value = 值</p>
</li>
<li><p>操作闭合标签内容</p>
<p>获取内容：标签.innerHTML，标签.innerText</p>
<p>设置内容：标签.innerHTML = ‘值’，标签.innerText = ‘值’</p>
<p>注意：</p>
<ul>
<li><p>操作闭合标签的内容会有覆盖作用，后面写的会覆盖前面写的。</p>
</li>
<li><p>innerHTML能识别标签，而innerText不能识别标签。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;span>一个span&lt;/span>'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//一个span</span>
p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;span>一个span&lt;/span>'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//&lt;span>一个span&lt;/span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="9、JavaScript操作元素属性"><a href="#9、JavaScript操作元素属性" class="headerlink" title="9、JavaScript操作元素属性"></a>9、JavaScript操作元素属性</h3><ul>
<li>获取属性：标签.属性名</li>
<li>设置属性：标签.属性名 = ‘属性值’</li>
</ul>
<p>注意：class是保留字，不能直接使用，操作标签的class属性语法为：标签.className。</p>
<p>上面的操作都是使用点操作符，也可以使用中括号操作符。某一个具体的属性名用点操作符，<strong>当属性存在在变量中，使用中括号操作该属性</strong>。</p>
<h3 id="10、JavaScript操作元素样式"><a href="#10、JavaScript操作元素样式" class="headerlink" title="10、JavaScript操作元素样式"></a>10、JavaScript操作元素样式</h3><ul>
<li>获取属性：元素.style.样式名</li>
<li>设置属性：元素.style.样式名 = ‘值’</li>
</ul>
<p>注意：添加类似font-size、background-color这种由‘-’连接而成的属性时，需要去掉‘-’，并且把后面的单词首字母大写，符合驼峰命名法。</p>
<p>上面的方法每次只能设置一种样式，cssText可以同时设置多种样式，cssText本质是设置HTML元素的style属性，但是它会覆盖原来用cssText给标签设置的行内样式（不会覆盖原css样式），可以使用+操作符解决覆盖问题。在样式值前面加‘ ; ’可以解决兼容问题。</p>
<pre class=" language-js"><code class="language-js">box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText  <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">";width:100px;height:50px;"</span><span class="token punctuation">;</span></code></pre>
<p>使用js设置的样式最终都成为行内样式。</p>
<h3 id="11、其他"><a href="#11、其他" class="headerlink" title="11、其他"></a>11、其他</h3><ul>
<li>js中除了数字和变量，其他数据操作时需要用引号引起来。</li>
<li>js中的单引号与双引号没有区别，但是嵌套使用时需要成对出现，一般双引号嵌套单引号。</li>
<li>一般情况下js每一条语句结束后换行之后，不加分号对后面的语句没有影响，但是建议加上分号，使代码更美观可读，不加分号可能会引起某些不知名错误。</li>
<li>js区分大小写。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数据在内存中的存储方式</title>
    <url>/posts/242b.html</url>
    <content><![CDATA[<h1 id="JavaScript中数据在内存中的存储方式"><a href="#JavaScript中数据在内存中的存储方式" class="headerlink" title="JavaScript中数据在内存中的存储方式"></a>JavaScript中数据在内存中的存储方式</h1><h3 id="1、js数据类型分类"><a href="#1、js数据类型分类" class="headerlink" title="1、js数据类型分类"></a>1、js数据类型分类</h3><ul>
<li>简单数据类型：Number、String、Boolean、Undefined、Null</li>
<li>复杂数据类型：Object、Array、Function</li>
</ul>
<p>简单数据类型也称基本数据类型，复杂数据类型也称引用数据类型。</p>
<h3 id="2、数据结构"><a href="#2、数据结构" class="headerlink" title="2、数据结构"></a>2、数据结构</h3><p>数据结构是计算机存储、组织数据的方式。这里只列出分类不做详细解释，常用的数据结构有：数组、栈、堆、列表、链表、树、图、散列表。</p>
<p>本文中只用到这两种数据结构：栈(后进先出，使用堆的一种方法)、堆(特殊的树形结构)</p>
<h3 id="3、简单数据类型存储方式"><a href="#3、简单数据类型存储方式" class="headerlink" title="3、简单数据类型存储方式"></a>3、简单数据类型存储方式</h3><p>简单数据类型保存在栈中，这些类型在内存中别占有固定大小，他们的值保存在栈空间，按值访问。变量在声明过程中，会在栈中开辟一段内存空间，变量值直接存在该内存中，变量读写的是它们实际保存的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/1.png" class="">

<p>简单数据数据复制时，会为新声明的变量开辟一段新空间， 然后把值复制到为新变量分配的空间中。 </p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> str<span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/2.png" class="">

<p>简单数据类在当前执行环境结束时销毁。</p>
<h3 id="4、复杂数据类型存储方式"><a href="#4、复杂数据类型存储方式" class="headerlink" title="4、复杂数据类型存储方式"></a>4、复杂数据类型存储方式</h3><p>复杂数据类型是不固定大小的数据，但是存放他们的地址大小是固定的，所以把地址保存在栈中，值保存在堆中。复杂数据类型是一个指针，指针保存在栈中，但是指针指向的是堆。即存储复杂数据类型的变量保存在栈中，数据本身保存在堆中。读取其数据时，先访问栈中的地址，通过地址找到存在堆中的数据。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/3.png" class="">

<p>复杂数据类型进行浅拷贝时，复制的是引用地址。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/4.png" class="">

<p>由于浅拷贝指向的是同一个地址，所以当object2和arr2的值改变时，object1和arr1的值也随之改变。</p>
<p>与浅拷贝对应的是深拷贝，深拷贝是将引用类型的值全部拷贝一份，并且存放在不同的内存中，形成一个新的引用类型，修改它的值不会影响原来的值。</p>
<p>复杂数据类型不会随着当前执行环境结束而销毁，只有存放变量的地址不存在时，内存才会被垃圾回收机制回收。</p>
<p>但是这里有一个特殊的地方，就是null，null类型虽然是简单数据类型，但实际是一个特殊的对象，存放null的变量在栈中，指针指向堆中的一段空内存。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数据类型</title>
    <url>/posts/2ddf.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第二章-JavaScript数据类型"><a href="#第二章-JavaScript数据类型" class="headerlink" title="第二章 JavaScript数据类型"></a>第二章 JavaScript数据类型</h2><h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><h4 id="1-1、为什么需要数据类型？"><a href="#1-1、为什么需要数据类型？" class="headerlink" title="1-1、为什么需要数据类型？"></a>1-1、为什么需要数据类型？</h4><p>不同的数据类型占用的内存大小不一样，为了合理有效地分配内存空间，划分了数据类型。</p>
<h4 id="1-2、数据类型分类"><a href="#1-2、数据类型分类" class="headerlink" title="1-2、数据类型分类"></a>1-2、数据类型分类</h4><ul>
<li><p>简单数据类型：Number、String、Boolean、Undefined、Null</p>
</li>
<li><p>复杂数据类型：Object、Array、Function</p>
</li>
</ul>
<h4 id="1-3、Number类型"><a href="#1-3、Number类型" class="headerlink" title="1-3、Number类型"></a>1-3、Number类型</h4><p>Number即数值类型，主要用于参与数学运算，包含：整数、小数、进制、无穷大、无穷小、NaN</p>
<p>注意：</p>
<ul>
<li>NaN证明运算表达式是一个非法运算，算数运算不能得到正常地数字都会返回NaN，并且任意两个NaN都是不相等的。</li>
<li>精度缺失，小数之间进行运算，由于计算机是通过二进制进行计算，存储时会导致精度缺失，<strong>因此不能使用小数作为判断条件</strong>。解决方法：将运算的小数乘以100，再将结果除以100。</li>
</ul>
<h4 id="1-4、String类型"><a href="#1-4、String类型" class="headerlink" title="1-4、String类型"></a>1-4、String类型</h4><p>即字符串类型，用单引号或双引号引起来的数据，有长度有下标，只可读不可写。需要注意的是，所有从键盘输入到界面的数据都是字符串类型。</p>
<p>基本的操作方法有：</p>
<ul>
<li>.length：获取字符串长度，包括空格。</li>
<li>字符串[下标]：获取对应下标的字符，ie7及以下获取到undefined。</li>
<li>.charAt(下标)：获取字符串对应下标的字符，下标从0开始。</li>
<li>.charCodeAt(下标)：返回对应下标的字符在ASCII表中的值。数字范围：48-57，大写字母范围：65-90，小写字母范围：97-122。</li>
</ul>
<h4 id="1-5、Boolean类型"><a href="#1-5、Boolean类型" class="headerlink" title="1-5、Boolean类型"></a>1-5、Boolean类型</h4><p>真：true（1）、假：false（0），数字0和空字符串为假，其他都为真。</p>
<p>if语句中的判断条件，都会转成Boolean类型。</p>
<h4 id="1-6、null和undefined"><a href="#1-6、null和undefined" class="headerlink" title="1-6、null和undefined"></a>1-6、null和undefined</h4><p>null：Null类型，是js中的一个关键字，代表空值，代表一个空指针对象，使用typeof运算得到“object”，存放null的变量存在堆中，null值本身存在栈中，可以认为他是特殊的对象值。</p>
<p>undefined：undefined类型，当变量声明了未初始化时，得到的就是undefined。在ECMAScript第三版引入，为了区分空指针对象和未初始化的变量，它是一个预定义的全局变量。没有返回值的函数为undefined，没有实参的形参也是undefined。</p>
<h4 id="1-7、Object"><a href="#1-7、Object" class="headerlink" title="1-7、Object"></a>1-7、Object</h4><p>万物皆对象，通过键值对的方式存储数据，键值对之间以逗号隔开。</p>
<p>声明方式</p>
<ul>
<li><p>new实例化对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>字面量形式声明对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h4 id="1-8、Function"><a href="#1-8、Function" class="headerlink" title="1-8、Function"></a>1-8、Function</h4><p>函数的作用是用来存储代码块，调用时才执行，typeof运算结果为function。</p>
<p>声明方式</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    代码块<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>调用方式：函数名()</p>
<h4 id="1-9、Array"><a href="#1-9、Array" class="headerlink" title="1-9、Array"></a>1-9、Array</h4><p>数组可以存放任意类型的数据，有长度有下标（从0开始），typeof运算结果为object。</p>
<h4 id="1-10、拓展"><a href="#1-10、拓展" class="headerlink" title="1-10、拓展"></a>1-10、拓展</h4><p>在ECMA中，除了Number，String，null，undefined，Boolean，其它的实例都会归为object。而创建Function或者Array这些类型的实例的时候，其实都是基于Object实例进行的一种扩展。只是多了一些特有属性。判断一个对象是一个数组还是普通的Object可以使用Array.isArray的方法。然而这个方法会因为在跨iframe的情况下失效。最简单的办法是Object.prototype.toString.call(array)的方式。因为只有通过Object的原型的toString方法才能拿到每个实例的[class]内部属性。 </p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Array]</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Function]</span></code></pre>
<h3 id="2、数据类型转换"><a href="#2、数据类型转换" class="headerlink" title="2、数据类型转换"></a>2、数据类型转换</h3><ul>
<li><p>强制类型转换</p>
<ul>
<li><p>Number()</p>
<p>将其他数据类型转为数值类型，返回一个新的数值，不改变变量本身。</p>
<p>只能转换纯数字和空字符串(0)，其他的都是NaN，Boolean类型也能转换但是是隐式转换。</p>
</li>
<li><p>parseInt()</p>
<p>转换为Number类型，取整，舍弃小数部分。</p>
<p>该方法还有第二个参数radix，<strong>代表第一个参数以什么进制参与转换，最终的结果都是转为十进制</strong>。注意：当省略第二个参数且数字以0开头时，在IE8及以下浏览器中会将它当作八进制进行转换，所以建议一般加上第二个参数。</p>
</li>
<li><p>parseFloat()</p>
<p>转换为Number类型，保留小数，最后的0自动省略。</p>
<p>parseFloat().toFxid(n)，代表保留小数点后n位。</p>
</li>
</ul>
<blockquote>
<p>parseInt()与parseFloat()方法解析的原则是<strong>尽可能从前往后解析，若有能实别的数字就解析，遇到不能实别的就结束转换，即使后面还有数字也不转换</strong>。如果第一位就不是数字就返回NaN。</p>
</blockquote>
<ul>
<li><p>isNaN()</p>
<p>is not a number是不是不是一个数字类型，内部调用Number()方法，如果能成功转成数字类型，返回false，不成功返回true。</p>
</li>
<li><p>变量.toString()和String()</p>
<p>两个方法将其他类型转成字符串类型，不会改变原来的值。</p>
<p>String(变量)能针对任何数据类型，而变量.toString()不能转换undefined和null。</p>
</li>
<li><p>Boolean()</p>
<p>可以将任何值转为布尔值。</p>
<p>除了undefined、null、false、0、NaN、空字符串 这六个值之外，其他值均是真值。包括{}和[]。</p>
</li>
</ul>
</li>
</ul>
<h3 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h3><ul>
<li>算数运算符：+ - * / % ++ –</li>
<li>赋值运算符：= += -= *= /=</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= == !==  !=  === </li>
<li>逻辑运算符：&amp;&amp; || ！</li>
<li>三目运算符：条件 ？ 条件成立的代码 ： 条件不成立的代码</li>
</ul>
<h3 id="4、数据类型的隐式转换"><a href="#4、数据类型的隐式转换" class="headerlink" title="4、数据类型的隐式转换"></a>4、数据类型的隐式转换</h3><ul>
<li><p>“+”进行运算时，只要两边有一边是字符串，“+”就当作字符串连接符，这时候会将两边的数据都调用String()转成字符串进行拼接。两边都是数字或Boolean、null时，才是算数运算符，这时将调用Number()方法将两边的数据转成Number类型进行运算。</p>
<img src="/posts/2ddf/2-1.jpg" class="">
</li>
<li><p>当关系运算符两边有一边是字符串时，会将其他数据类型使用Number()转换，然后比较。</p>
</li>
<li><p>当关系运算符两边都是字符串时，会同时转成Number然后比较关系，但是此时并不是按照Number()的形式转成数字，而是按照字符串对应的ASCII编码，比较ASCII的大小，并且是从左往右依次比较，如果不相等直接得出结果，如果相等则继续比较第二个字符。</p>
<img src="/posts/2ddf/2-2.jpg" class="">
</li>
<li><p>复杂数据类型在隐式转换时会先转成String，然后再转成Number运算。</p>
<img src="/posts/2ddf/2-3.jpg" class="">
</li>
<li><p>空数组的toString()方法会得到空字符串，而空对象的toString()方法会得到字符串‘[object Object]’。</p>
<img src="/posts/2ddf/2-4.jpg" class="">

<img src="/posts/2ddf/2-5.jpg" class="">



</li>
</ul>
<p>说明：隐式转换参考（及图片）自：传智播客官方博客 文章：<a href="https://blog.csdn.net/itcast_cn/article/details/82887895%EF%BC%8C%E6%84%9F%E8%B0%A2%E3%80%82">https://blog.csdn.net/itcast_cn/article/details/82887895，感谢。</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数组对象</title>
    <url>/posts/357e.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第八章-JavaScript数组对象"><a href="#第八章-JavaScript数组对象" class="headerlink" title="第八章 JavaScript数组对象"></a>第八章 JavaScript数组对象</h2><h3 id="1、数组对象"><a href="#1、数组对象" class="headerlink" title="1、数组对象"></a>1、数组对象</h3><p>数组：使用单独的变量名来储存一系列的值，数组可以存储任意数据类型的数据，具有长度和下标。</p>
<h3 id="2、创建数组"><a href="#2、创建数组" class="headerlink" title="2、创建数组"></a>2、创建数组</h3><ul>
<li><p>字面量方式创建</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ahb'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sd'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>构造函数创建</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]空数组</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>
<span class="token comment" spellcheck="true">//注意：如果参数只有一个值且是数值，代表创建一个该长度的空数组</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[empty × 4]长度4的空数组</span></code></pre>
</li>
</ul>
<h3 id="3、遍历数组"><a href="#3、遍历数组" class="headerlink" title="3、遍历数组"></a>3、遍历数组</h3><ul>
<li><p>使用for循环遍历配合下标和长度遍历</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//1 2 3 4 "a" "b" "c"</span></code></pre>
</li>
<li><p>for-in()，遍历对象的标配方法，遍历数组时返回的数组下标是字符串，所以不常用，使用时需注意。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> arr4<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token keyword">typeof</span> key<span class="token punctuation">,</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
0 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
1 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
2 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
3 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
4 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
5 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
6 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
*/</span></code></pre>
</li>
</ul>
<p>4、数组的操作方法</p>
<ul>
<li><p>栈方法：在数组末尾操作元素，可以改变原数组。</p>
<ul>
<li><p>push()：在数组末尾添加任意个数的元素，<strong>改变原数组，返回新数组长度</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["a", "b", "c", "d", "e"]</span></code></pre>
</li>
<li><p>pop()：从数组末尾移除最后一项，没有参数，不能指定删除元素，<strong>改变原数组，返回的是被删除的元素</strong>，一次只能删除一个。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'ef'</span><span class="token punctuation">,</span><span class="token string">'jh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jh</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;["ab", "cd", "ef"]</span></code></pre>
</li>
</ul>
</li>
<li><p>队列方法：在数组头部操作元素，可以改变原数组。</p>
<ul>
<li><p>unshift()：在数组前端添加任意个数的元素，<strong>改变原数组，并返回新数组的长度</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["d", "e", "a", "b", "c"]</span></code></pre>
</li>
<li><p>shift()：从数组前端移除第一项，没有参数，不能指定删除元素，<strong>改变原数组，返回的是被删除的元素</strong>，一次只能删除一个。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'ef'</span><span class="token punctuation">,</span><span class="token string">'jh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ab</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;["cd", "ef", "jh"]</span></code></pre>
</li>
</ul>
</li>
<li><p>splice()：删除、添加、替换</p>
<p>在当前数组中删除一段连续的元素，并且可以在被删除的位置上添加新的元素，<strong>改变原数组</strong>，<strong>以数组的形式返回被删除的元素</strong>。</p>
<p>splice(start,deleteCount,item1,…,itemX)</p>
<ul>
<li><p>删除</p>
<p>splice(起始位置，删除项数)，从起始下标位置开始删除包括该位置，删除项数是Number类型，如果删除项数省略则默认删到末尾。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["c", "d"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["a", "b"]</span></code></pre>
</li>
<li><p>添加</p>
<p>splice(添加位置所在下标，0，’添加元素1‘，…，’添加元素n‘)，添加位置所在下标会将原来该位置的元素往后移。第二个参数为0，表示不删除，第二个参数之后可以是多个被添加的参数。返回值为空值，因为没有删除元素。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(6)&amp;nbsp;["a", "b", "e", "f", "c", "d"]</span></code></pre>
</li>
<li><p>替换</p>
<p>splice(起始位置，删除项数，’替换元素1‘，…，’替换元素n‘)，从起始下标位置开始替换包括该位置，删除项数是Number类型，第二个参数之后可以是多个替换的参数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["c", "d"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["a", "b", "f", "g", "e"]</span>
<span class="token comment" spellcheck="true">//如果第二个参数省略，则会将后面第一个替换的字符串当作删除的字符串，如果查询不到该字符串则不删除，返回空值，将第二个及后面替换的字符插在相应位置。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(6)&amp;nbsp;["a", "b", "g", "c", "d", "e"]</span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="4、数组去重"><a href="#4、数组去重" class="headerlink" title="4、数组去重"></a>4、数组去重</h3><ul>
<li><p>splice()方法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除元素后，字符串长度减少，j要相应减少</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 3, 4, 7, 5, 9, 2]</span></code></pre>
</li>
<li><p>indexOf()、push()方法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 3, 4, 7, 5, 9, 2]</span></code></pre>
</li>
</ul>
<h3 id="5、数组排序"><a href="#5、数组排序" class="headerlink" title="5、数组排序"></a>5、数组排序</h3><ul>
<li><p>sort()</p>
<p>该方法按升序排列数组项，只能排序10以下，不包括10，超过10只比较十位数上的大小，<strong>该方法是在原数组上排序会改变原数组顺序</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[10, 15, 2, 21, 3, 6, 7, 9]</span></code></pre>
<p>该方法可以接收一个匿名函数作为参数，该函数称为比较函数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//return a-b; //从小到大</span>
    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从大到小</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[21, 15, 10, 9, 7, 6, 3, 2]</span></code></pre>
<p>用sort()方法对中文进行排序。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'刘备'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙尚香'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'小乔'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙策'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'大乔'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//localeCompare:是把中文转成拼音并拿到第一个字的首字母</span>
<span class="token comment" spellcheck="true">//"zh":以中文的方式排序，按abcd...顺序排序。如果是英文则以Unicode编码进行排序。</span></code></pre>
<img src="/posts/357e/8-1.png" class="">
</li>
<li><p>排序算法</p>
<ul>
<li><p>选择排序</p>
<p>从第一项起，每一项都和后面所有项依次进行比较，如果后面的数小于前面的数，则交换位置。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 3, 5, 5, 9, 12, 17, 21]</span></code></pre>
</li>
<li><p>冒泡排序</p>
<p>从第一项起，比较相邻的元素，如果前一个比后一个大，则交换位置，最后一个数最大，之后从一个开始重新循环。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 3, 5, 5, 9, 12, 17, 21]</span></code></pre>
</li>
<li><p>快速排序</p>
<p>找到数组的中间项，把中间项用splice删除，然后循环数组，如果比这项小的，放在一个left数组中，如果比这项大的，放在一个right数组中，然后递归调用快速排序方法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//终止条件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值下标，向下取整</span>
    <span class="token keyword">var</span> midNum <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>midNum<span class="token punctuation">)</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边数组存放小于midNum的值</span>
    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边数组存放大于midNum的值</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> midNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小于中间值存放在左边数组</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大于中间值放在右边数组</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midNum<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右两边数组递归调用本函数循环比较，最终cancat函数进行字符串连接。</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="6、数组的其他方法"><a href="#6、数组的其他方法" class="headerlink" title="6、数组的其他方法"></a>6、数组的其他方法</h3><ul>
<li><p>数组.join()</p>
<p>将数组以特定格式拼接成字符串，该方法只接收一个参数，即用作分隔符的字符串，然后<strong>返回生成的字符串，不改变原数组</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1-2-a-b</span></code></pre>
</li>
<li><p>数组1.concat(数组2，数组3，…)</p>
<p>连接数组，该方法的参数接收一个或多个数组（或任意的值），该方法会将这些数组中的每一项都添加到结果数组中。<strong>不改变原数组，返回新数组。</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token string">'new'</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 2, 3, 666, "new", "a", "d", "c"]</span></code></pre>
</li>
<li><p>数组.reverse()</p>
<p>该方法会反转数组的顺序，<strong>改变原数组并返回</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;[5, 4, 3, 2, 1]</span></code></pre>
</li>
<li><p>数组.indexOf()</p>
<p>该方法接收两个参数：要查找的项和查找起点位置的索引，查找无果返回-1。</p>
<p>lastIndexOf()为向后往前找，这两种方法在数组中使用与在字符串中使用情况相同，详细参考第七章字符串对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1，从下标为3的位置开始找2</span></code></pre>
</li>
<li><p>slice()</p>
<p>截取数组：数组.slice(起始下标，结束下标)，不包括结束下标，<strong>不影响原数组，返回新数组</strong>。当两个参数都省略时，相当于复制数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;[3, 4, 5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 2, 3, 4, 5, 6, 7]</span></code></pre>
</li>
<li><p>Array.isArray(参数)</p>
<p>该方法是一个静态方法（ 静态方法指在构造函数本身上定义的方法，只能通过构造函数本身调用，new出来的对象不能够调用。 ），用来判断是否是一个数组，该方法IE8及以下不支持。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre>
</li>
</ul>
<h3 id="7、数组的迭代方法"><a href="#7、数组的迭代方法" class="headerlink" title="7、数组的迭代方法"></a>7、数组的迭代方法</h3><p>数组迭代，通俗来讲就是数组遍历，js常用的迭代方法有如下：</p>
<ul>
<li><p>forEach(function(value,index){})</p>
<p>简单的循环数组，没有返回值，函数参数分别是数组的项和下标。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
0 1
1 2
2 3
3 4
4 5
*/</span></code></pre>
</li>
<li><p>every(function(value,index,array){})</p>
<p>针对数组元素元素做些判断，如果结果都为true，则返回的结果为true。函数参数分别是数组项、下标、数组本身。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
</li>
<li><p>some(function(value,index,array){})</p>
<p>针对数组元素做某些判断，如果有一个为true，则返回的结果为true，且不再比较后面的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
</li>
<li><p>filter(function(value,index,array){})</p>
<p>针对数组元素做某些判断，满足条件的元素会生成一个新的数组并返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">fliter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;[4, 5]</span></code></pre>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-流程控制语句</title>
    <url>/posts/1f2d.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第三章-流程控制语句"><a href="#第三章-流程控制语句" class="headerlink" title="第三章 流程控制语句"></a>第三章 流程控制语句</h2><p>JavaScript中的流程控制语句和其他程序设计语言基本时一样的，主要分为：</p>
<ul>
<li>顺序结构：即按顺序执行代码；</li>
<li>条件选择结构（分支语句）：包括if-else以及switch</li>
<li>循环结构：包括for循环、while、do-while，for-in；</li>
<li>其他语句：break、continue</li>
</ul>
<h3 id="1、分支语句"><a href="#1、分支语句" class="headerlink" title="1、分支语句"></a>1、分支语句</h3><ul>
<li><p>if</p>
<p>语法：if（条件）{条件成立执行的代码}</p>
</li>
<li><p>if-else</p>
<p>语法：if（条件）{条件成立执行的代码}else{条件不成立执行的代码}</p>
</li>
<li><p>if-else嵌套</p>
<p>语法：if（条件）{条件成立执行的代码}else if（条件）{条件成立执行的代码}else if（条件）{条件成立执行的代码}else{以上条件都不成立执行的代码}</p>
<p>当然，最后一个else分支可以省略。</p>
</li>
<li><p>switch</p>
<p>语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<ul>
<li><p>switch语句中比较的是全等（===）。</p>
</li>
<li><p>switch只能使用break，不能使用continue，当匹配到其中一个值时，后面的匹配都不再进行。</p>
</li>
<li><p>default中的break可以省略。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>if能实现的switch不一定能实现，switch能实现的if一定能实现。</li>
<li>当条件是一个范围或值是一个Boolean值的时候用if。</li>
<li>当条件是固定的值或字符时用switch。</li>
</ul>
</blockquote>
<h3 id="2、循环语句"><a href="#2、循环语句" class="headerlink" title="2、循环语句"></a>2、循环语句</h3><p>循环三要素：初始化循环变量、跳出循环的条件、更新循环变量</p>
<ul>
<li><p>for循环</p>
<p>语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>初始化循环变量<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>判断条件<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>更新循环变量<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token number">3</span><span class="token punctuation">.</span>循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//执行的顺序为1->2->3->4->2->3->4(更新循环变量为++i除外)</span></code></pre>
<p>当然，for循环可以嵌套使用，两层嵌套中，外循环执行一次，内循环遍历所有。</p>
</li>
<li><p>for-in</p>
<p>for-in循环是专门为循环对象设置的（数组也可以，但不常用），因为对象没有长度没有顺序，所以不能使用for循环。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token string">'man'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//name age sex</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三 21 man</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//由于这里是将对象中的属性赋值给了for-in中的key变量，所以操作属性时用方括号。</span></code></pre>
</li>
<li><p>while</p>
<p>语法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化循环变量</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环结束条件</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新循环变量</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>do-while</p>
<p>do-while循环先执行后判断。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="3、break与continue"><a href="#3、break与continue" class="headerlink" title="3、break与continue"></a>3、break与continue</h3><p>break与continue的区别是：break结束循环，之后的循环不执行。continue是结束本次循环，直接执行下一次循环。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js-Web模块</title>
    <url>/posts/4fce.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第六章-Node-js-Web模块"><a href="#第六章-Node-js-Web模块" class="headerlink" title="第六章 Node.js Web模块"></a>第六章 Node.js Web模块</h2><h3 id="什么是Web服务器？"><a href="#什么是Web服务器？" class="headerlink" title="什么是Web服务器？"></a>什么是Web服务器？</h3><p>Web服务器一般指网站服务器，是指驻留与因特网上某种类型计算机的程序，Web服务器的基本功能，就是提供Web信息浏览服务。它只需要支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。</p>
<p>大多数web服务器都支持服务端的脚本语言php、python、ruby等，并通过脚本语言从数据库获取数据，将结果返回给客户浏览器。</p>
<p>目前最主流的web服务器是Apache、Nginx、IIS。</p>
<h3 id="Web应用架构"><a href="#Web应用架构" class="headerlink" title="Web应用架构"></a>Web应用架构</h3><ul>
<li>Client：客户端，一般指浏览器，浏览器可以通过HTTP协议向服务器请求数据。</li>
<li>Server：服务端，一般指Web服务器，可以接收客户端请求，并向客户端发送响应数据。</li>
<li>Business：业务层，通过Web服务器处理应用程序，如数据库交互、逻辑运算、调用外部程序等。</li>
<li>Data：数据层，一般由数据库组成。</li>
</ul>
<h3 id="使用Node创建Web服务器"><a href="#使用Node创建Web服务器" class="headerlink" title="使用Node创建Web服务器"></a>使用Node创建Web服务器</h3><p>Node.js提供了http模块，http模块主要用于搭建HTTP服务端和客户端，使用HTTP服务器或客户端功能必须调用http模块。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个服务，如果有url访问到了这个服务，回调函数执行。</span>
<span class="token comment" spellcheck="true">//回调函数形参request代表请求对象，里面存储请求的信息。</span>
<span class="token comment" spellcheck="true">//形参response代表响应对象</span>
http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//把服务监听3000端口号</span>
serve<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>request对象中有以下属性：</p>
<ul>
<li>url：请求的url地址</li>
</ul>
<p>response响应对象中有如下方法：</p>
<ul>
<li>write()：向响应对象添加信息</li>
<li>end()：代表本次响应结束</li>
<li>writeHead(status,{‘Content-Type’:‘text/html;charset=utf-8’})：设置响应头，有两个参数，第一个参数是状态码，第二个参数是对象，包含响应类型和编码格式。</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP协议（超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的www文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据。（HTTP协议属于应用层，TCP/IP协议属于传输层和网络层，关于网络通信详见<a href="https://baike.baidu.com/item/TCP/IP%E5%8D%8F%E8%AE%AE/212915">TCP/IP协议</a>百度百科。）</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>支持客户端/服务器模型</p>
</li>
<li><p>简单快速</p>
<p>向服务器请求服务时，只需要传送请求方法和路径。请求方法常用的有GET、POST、HEAD。每种方法规定了客户于服务器的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度快。</p>
</li>
<li><p>灵活</p>
<p>HTTP允许传输任意类型对的数据对象，正在传输的类型由Content-Type加以标记，Content-Type类型可以百度MIME类型。</p>
</li>
<li><p>无连接</p>
<p>无连接的含义是限制每次连接只处理一个请求，服务器处理完客户端的请求，然后响应，并且收到应答之后就断开连接，这种方式可以节省传输时间。</p>
</li>
<li><p>无状态</p>
<p>HTTP协议是无状态协议，无状态协议是指协议对于事物处理没有记忆能力，这种方式的坏处就是如果后续的处理需要用到之前的信息，则必须要重传，这样就导致了每次连接传输的数据量增大。好处就是如果后续的连接不需要之前提供的信息，响应就会比较快，而为了解决HTTP的无状态特性，出现了Cookie和Session技术。</p>
</li>
</ul>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>HTTP协议是一个基于请求和应答模式的，存在于传输层的之上的应用协议，是一个无状态的协议，通常是基于TCP的连接方式。HTTP的URL是一中特殊类型的URL，包含了用于定位查找某个网络资源的路径，格式为包括如下：</p>
<ul>
<li>协议</li>
<li>域名/IP</li>
<li>端口号</li>
<li>相对路径</li>
</ul>
<h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>HTTP请求信息由如下三部分组成：</p>
<ul>
<li>请求方法URL协议/版本</li>
<li>请求头（Request Header）</li>
<li>请求正文</li>
</ul>
<h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>在接收和解释请求信息后，服务器返回一个HTTP响应信息。</p>
<p>HTTP响应由三部分组成：</p>
<ul>
<li>状态行，常见状态代码、状态描述、说明有：<ul>
<li>200：OK    //客户端请求成功</li>
<li>400：Bad Request    //客户端请求有语法错误，不能被服务器所理解</li>
<li>401：Unauthorized    //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li>
<li>403：Forbidden    //服务器收到请求，但是拒绝提供服务。</li>
<li>404：Not Found    //请求资源不存在，如URL错误</li>
<li>500：Internal Server Error    //服务器发生不可预期的错误</li>
<li>503：Server Unavailiable    //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
</li>
<li>消息报头：响应报头后述</li>
<li>响应正文：服务器返回的资源内容</li>
</ul>
<h4 id="HTTP工作过程"><a href="#HTTP工作过程" class="headerlink" title="HTTP工作过程"></a>HTTP工作过程</h4><ul>
<li><p>客户端连接到web服务器</p>
<p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认80）建立一个TCP套接字连接。</p>
</li>
<li><p>客户端发送HTTP请求</p>
<p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头、空行、请求体四个部分构成。</p>
</li>
<li><p>服务器就收解释请求并返回HTTP响应</p>
<p>Web解析请求，定位请求资源，服务器将资源复写到TCP套接字，由客户端获取，一个响应由状态行、响应头、空行、响应数据4个部分。</p>
</li>
<li><p>客户端释放TCP连接</p>
<p>若Connection模式为close，则服务器主动关闭TCP连接，客户端被动关闭TCP连接，释放TCP连接。若Connection为keepalive，则该连接会保存一段时间，该时间内可以持续使用该连接接收请求，做出响应。</p>
</li>
</ul>
<h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><h4 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h4><p>专注于文件路径</p>
<h4 id="URL模块"><a href="#URL模块" class="headerlink" title="URL模块"></a>URL模块</h4><p>专注于处理url地址</p>
<h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><p>专注于url中使用get请求后面参数解析</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js基础</title>
    <url>/posts/42fa.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第四章-Node-js基础"><a href="#第四章-Node-js基础" class="headerlink" title="第四章 Node.js基础"></a>第四章 Node.js基础</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node js"></a>Node js</h3><p>Node js基于google v8引擎，在服务器端支持JavaScript的一种运行环境。</p>
<p>Node.js主要用于编写想Web服务器一样的网络应用，这和PHP、Pyhton是类似的，但是Node.js与其他语言最大的不同之处在于，PHP等语言是阻塞的而Node.js是非阻塞的。Node.js是事件驱动的，开发者可以在不使用线程的情况下开发出一个能够承载高并发的服务器。其他服务端语言难以开发高并发应用，即使可以，性能也不尽人意。Node.js正是在这个前题下被创造出来。Node.js把JS的易学易用和Unix网络编程的强大结合在了一起。</p>
<p>Node.js和其他语言相比：</p>
<ul>
<li>Node.js不是一种独立语言，与PHP、JSP、Python的“既是语言又是平台”不同，Node.js使用JavaScript进行编程，运行在JavaScript引擎上（V8）。</li>
<li>与PHP，JSP相比（PHP、JSP、.net都需要运行在服务器程序上，Apache、Nginx、IIS。），Node.js跳过了这些HTTP服务器，它自己不用建设在任何服务器软件之上。Node.js的许多设计理念与经典架构（LAMP=Linux+Apache+MySQL+PHP）有很大的不同，可以提供强大的伸缩能力。</li>
</ul>
<h4 id="Node-js特点"><a href="#Node-js特点" class="headerlink" title="Node js特点"></a>Node js特点</h4><ul>
<li><h5 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h5><p>在Java、PHP等服务端语言中，会为每个客户端连接创造一个新的线程，因此，用户数量越多，服务器数量就越多，成本越大。</p>
<p>Node.js不为每个客户创建新的线程，而仅仅使用一个线程。Node.js处理请求是单线程的，但是后台拥有一个I/O线程池。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js宏观上也是并行的。</p>
<p>PHP等多线程中，每个线程耗费大约2M，一个8GB内存服务器同时连接的最大用户数量为4000个。使用Node.js一个8BG内存可以同时处理4万用户的连接。</p>
<p>单线程的好处还有：操作系统完全不再有线程创建、销毁的时间开销。但是坏处是，一个用户造成了线程的崩溃，整个服务器都崩溃了，其他用户也会崩溃。</p>
</li>
<li><h5 id="非阻塞I-O"><a href="#非阻塞I-O" class="headerlink" title="非阻塞I/O"></a>非阻塞I/O</h5><p>I/O操作指的是对磁盘的读写操作。异步I/O的概念和同步I/O相对。一个异步过程调用发出之后，调用者不能立即得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。在一个CPU密集型的应用中，有一些需要处理的数据可能放在磁盘上，预先直到这些数据位置，所以预先发起异步I/O读请求。等到真正需要用到这些数据的时候，再等待异步I/O完成。使用了异步I/O，在发起I/O请求到实际使用这些数据的这段时间内，程序还可以继续做其他事情。</p>
<p>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。</p>
</li>
<li><h5 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h5><p>在Node.js中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node.js中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数时，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</p>
<p>Node.js底层是C++(V8也是C++写的)。在底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。用一个线程，担负了处理非常多的任务使命。</p>
</li>
</ul>
<p>由于单线程，如果一个事情进入，但是I/O被阻塞了，这个线程就被阻塞了。</p>
<p>但由于非阻塞I/O，不会等待I/O结束，而会执行后面的语句。</p>
<p>但如果在处理A业务的同时，B的I/O回调完成怎么办？</p>
<p>事件机制（事件环），不管是新用户的请求还是老用户的I/O完成，都将以事件方式加入事件换，等待调度。</p>
<h4 id="Node-js适合开发什么？"><a href="#Node-js适合开发什么？" class="headerlink" title="Node.js适合开发什么？"></a>Node.js适合开发什么？</h4><p>Node.js善于I/O，不善于计算。因为Node最擅长的就是任务调度，如果业务上有很多的CPU计算，实际上也相对于这个计算阻塞了单线程，就不适合Node.js开发。</p>
<p>当应用程序需要大量并发的I/O，而在客户端发出响应之前，应用程序内部不需要非常复杂处理的时候，Node.js非常合适。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。如：</p>
<ul>
<li>Web服务API，比如REST。</li>
<li>实时多人游戏</li>
<li>后端的Web服务，如跨域、服务端的请求。</li>
<li>基于Web的应用</li>
<li>多客户端的通信，如即时通信。</li>
</ul>
<h4 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h4><p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>在LTS(稳定版)下，根据不同平台系统选择需要的Node.js安装包下载。安装过程中，均默认即可，安装目录可自定义选择。</p>
<h4 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h4><ul>
<li><p>浏览器：window</p>
</li>
<li><p>node js：global</p>
</li>
<li><p>ES6为了统一顶层对象，建议顶层对象为：globalThis。</p>
<p>在浏览器中它会自动为window，在node js中它自动为global。</p>
<p>并且，<strong>ES6中顶层对象的属性与全局变量脱离关系，即ES6中通过let、const等声明的全局变量不再global属性上。</strong></p>
</li>
</ul>
<h4 id="默认的全局变量"><a href="#默认的全局变量" class="headerlink" title="默认的全局变量"></a>默认的全局变量</h4><ul>
<li>__filename：当前js文件名(绝对路径)</li>
<li>__dirname：当前js文件路径(绝对路径)</li>
</ul>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><ul>
<li><p>指定大小创建，没有值时，默认为0</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00></span></code></pre>
</li>
<li><p>用字符串创建，类型必须是字符串(建议使用)</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'create a buffer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 63 72 65 61 74 65 20 61 20 62 75 66 66 65 72></span></code></pre>
</li>
</ul>
<h4 id="buffer转字符串"><a href="#buffer转字符串" class="headerlink" title="buffer转字符串"></a>buffer转字符串</h4><p>Buffer.toString()，带一个参数，参数是编码方法，一般为utf-8。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'create a buffer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//create a buffer</span></code></pre>
<h4 id="写入缓存"><a href="#写入缓存" class="headerlink" title="写入缓存"></a>写入缓存</h4><p>Buffer.write(string[,offset[,length]] [,encoding])</p>
<p>参数分别是：写入缓冲的字符串、缓冲区开始写入的索引值（默认为0）、写入字节的长度（默认全度写入）、使用的编码方式（默认utf8），除第一个外其他都可省略。</p>
<p>返回实际写入的大小，如果buffer空间不足，则只会写入部分字符串。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 61 62 63 64 00 00 00 00 00 00></span></code></pre>
<h4 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h4><p>Buffer.toString([encoding[,start[,end]]])</p>
<p>三个参数均可省略，分别是编码方式（默认utf8）、指定读取开始位置、结束位置。</p>
<p>返回读取的指定编码的字符串。</p>
<pre class=" language-js"><code class="language-js">buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abcd</span></code></pre>
<h4 id="将Buffer转换为JSON对象"><a href="#将Buffer转换为JSON对象" class="headerlink" title="将Buffer转换为JSON对象"></a>将Buffer转换为JSON对象</h4><p>语法：Buffer.toJSON()，返回一个JSON对象。</p>
<p>当字符串实例化一个Buffer实例时，JSON.stringify()会隐式地调用toJSON()。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> json <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{ type: 'Buffer', data: [ 49, 50, 51, 52, 53 ] }</span></code></pre>
<h4 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h4><p>语法：Buffer.concat(list[,totalLength])，返回一个新合成的Buffer。</p>
<p>参数描述：</p>
<ul>
<li>list：用于合并的Buffer对象数组列表。</li>
<li>totalLength：指定合并后Buffer对象总长度。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buffer1<span class="token punctuation">,</span>buffer2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三18</span></code></pre>
<h4 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h4><p>Buffer.length，返回Buffer对象所占据的内存长度。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'张三18岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//11</span></code></pre>
<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><p>模块：按照特定格式写出来的js文件。</p>
<p>Nodejs中采用CommonJS规范，按照规范书写和引用js文件。</p>
<h4 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h4><ul>
<li>module.exports. = { 自定义名1:模块名1,自定义名2:模块名2 }，简写为module.exports. = { 模块名1,模块名2 }：推荐使用</li>
<li>module.exports.自定义名 = 模块名</li>
<li>exports.自定义名 = 模块名：不推荐使用，因为一旦文件中出现了module.exports，用exports方法引用就失效了，它们不能同时出现。</li>
</ul>
<h4 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>module：变量存放模块，可以是对象；require：模块引用关键字；filename：被引用的js文件名，后缀.js可以省略。</p>
<p>模块定义</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>sum<span class="token punctuation">,</span>sub<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>模块引用</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./25-module定义'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
module<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者相对路径/绝对路径，它可以没有文件名后缀.js。模块的定义十分简单，接口也十分简洁。它的意义在在于将聚类的方法和变量等限定在私有作用域中。每个模块具有独立的空间，它们互不干扰，在引用时也显得干净利落。</p>
<p>模块的标识就是模块的名字或路径，Node.js通过模块的标识来寻找模块。</p>
<p>对于核心模块，直接使用模块的名字对其进行引入。</p>
<p>对于自定义的模块，需要通过文件的路径来对模块进行引入。</p>
<h4 id="内置模块-核心模块"><a href="#内置模块-核心模块" class="headerlink" title="内置模块/核心模块"></a>内置模块/核心模块</h4><p>nodejs存在内置模块，require()总是会优先加载核心模块。</p>
<ul>
<li><p>http模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>fs模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre>
</li>
<li><p>事件模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h3><p>大多数Node.js核心API构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。例如，net.Server会在每次有连接时触发事件，fs.ReadStream会在打开文件时触发事件，stream会在数据可读时触发事件。</p>
<p>所有能触发事件的对象都是EventEmitter类的实例。这些对象有一个eventEmitter.on()函数，用于将一个或多个函数绑定到命名事件上。事件的命名通常是驼峰式的字符串。当EventEmitter对象触发一个事件时，所有绑定在该事件上的函数都会被同步地调用。</p>
<h4 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//加载事件模块</span>
<span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实例化一个事件对象</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实例提供了两个方法</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'event1事件发生了'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把事件触发</span></code></pre>
<p>nodejs中没有固定事件，事件是自定义的，也存在事件对象e。event.emit()中第一个参数为事件名称，之后所有的参数都会当作参数传到事件的功能函数中，第一个参数事件名称不会当作参数传过去。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event2'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//[ 10, 20, 30 ]</span></code></pre>
<p>除了用on方法进行注册事件之外，还有以下方法进行事件注册。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//addListener()方法注册事件</span>
<span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'event3'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is event3!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//once()方法注册事件，该方法注册的事件只能只能执行一次，之后会被注销</span>
event<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'event4'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is event4!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre>
<h4 id="事件移除"><a href="#事件移除" class="headerlink" title="事件移除"></a>事件移除</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//该方法接收两个参数，一个是事件名称，第二个是回调函数名称</span>
<span class="token comment" spellcheck="true">//注意：该方法移除的事件，事件在添加事件时，必须是通过函数名添加的，如果是一个匿名函数添加事件，是没法用该方法移除的。</span>
event<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">'eName'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//移除该事件的所有事件</span>
event<span class="token punctuation">.</span><span class="token function">removeAllListeners</span><span class="token punctuation">(</span><span class="token string">'eName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="数量限制"><a href="#数量限制" class="headerlink" title="数量限制"></a>数量限制</h4><p>默认情况下，EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js文件系统</title>
    <url>/posts/ea0.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第五章-Node-js文件系统"><a href="#第五章-Node-js文件系统" class="headerlink" title="第五章 Node.js文件系统"></a>第五章 Node.js文件系统</h2><h3 id="文件系统简介"><a href="#文件系统简介" class="headerlink" title="文件系统简介"></a>文件系统简介</h3><p>Node.js提供一组类似UNIX标准的文件操作API，Node导入文件系统模块（fs）语法如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre>
<p>所有的文件系统操作都具有同步的、回调的、以及基于promise的形式。</p>
<h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><p>异步获取文件信息语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>path：文件路径，如果是相对路径，参照路径不是当前文件，而是控制台node的启动路径。</p>
<p>callback：回调函数，带有两个参数（err，stats），err是异常，stats是fs.Stats对象，包含了文件的信息。</p>
<p>stats具有如下两个常用方法：</p>
<ul>
<li>stats.isFile()：判断是否是文件，是则返回true。</li>
<li>stats.isDirectory()：判断是否为目录，是则返回true。</li>
</ul>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>异步读取文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>同样也有path和callback两个参数，但是它还有另一个参数code为编码格式。</p>
<p>与fs.stats()不同的是，fs.readFile()回调函数中有两个参数（err,data），err是异常，data是读取到的数据。</p>
<p>同步读取文件语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>code<span class="token punctuation">)</span></code></pre>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>异步覆盖写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步覆盖写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">)</span></code></pre>
<p>异步追加写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFlie</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步追加写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">)</span></code></pre>
<p>注意：</p>
<ul>
<li><p>写入文件时，当文件不存在时会创建文件，当path是带有文件夹的文件名时，文件不存在也能创建，但如果文件夹也不存在时，就会报错。</p>
</li>
<li><p>异步是通过err的形参接收异常，而同步如果发生错误则会直接报错。</p>
</li>
</ul>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>异步修改文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span>newName<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>除了修改文件，该方法还能修改路径，如果路径不存在则会报错。</p>
<p>同步修改文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span>newName<span class="token punctuation">)</span></code></pre>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>异步删除文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步删除文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span></code></pre>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>如果path中被创建目录的父级目录存在才能创建，如果包含不存在的父级目录，则无法创建。</p>
<h3 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>回调函数中files参数是被读取目录下的文件/目录组成的数组，且只能读取一层。</p>
<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>删除一个一个空目录。</p>
<p>以上方法创建和删除目录无法递归创建或者删除。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//同步方法递归删除</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//如果是文件，直接删除</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//如果是文件夹，先读取所有子文件</span>
        <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//用path包提供的join()方法把要删除的目录及子文件拼成一个完整的路径</span>
            <span class="token function">deleteDir</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//子文件删除完之后删除自己</span>
        fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//异步方法</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>
<span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Nodejs官方文档中，fs.redir()和fs.redirSync()方法给出了可以递归删除的参数，将{recursive:true}作为第二个参数，但是文档中说明了递归删除是实验的。</p>
<h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><h4 id="读取流"><a href="#读取流" class="headerlink" title="读取流"></a>读取流</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//创建一个读取流</span>
<span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置读取流的编码</span>
readStream<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//绑定一个事件，每次读取一块内容都会触发data事件</span>
<span class="token comment" spellcheck="true">//在回调函数中，能够设置一个形参chunk，接收每次读取的那一小块内容</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    data <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//end事件代表所有内容读取完成</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//error事件代表程序出现错误</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建写入流</span>
<span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//写入数据</span>
writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//标记文件末尾</span>
writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//处理流事件</span>
writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h3><p>管道提供了一个输出流到输入流的机制。通常我们从一个流中获取数据传递到另一个流中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建读取流</span>
<span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建写入流</span>
<span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//管道操作读写</span>
readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法三</title>
    <url>/posts/cab8.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第三章-ES6语法三"><a href="#第三章-ES6语法三" class="headerlink" title="第三章 ES6语法三"></a>第三章 ES6语法三</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>JavaScript中生成实例对象的传统方法是通过构造函数和原型对象混合方法，但是这种写法跟传统的面向对象语言（如c++,java）差异很大。ES6提供了更接近传统面向对象编程的语法，引入了Class类的概念。但是它不过是一个语法糖，它的绝大部分功能ES5都可以做到，class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>注意点：类不可重复声明、类定义不会被提升、类中方法不需要function关键字、类中方法见不能加分号。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传统写法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//class写法</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<p>表明：<strong>类的数据类型就是函数，类本身就指向构造函数。</strong></p>
<p>实际上，类的所有方法都定义在类的prototype属性上面。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//等同于</span>
Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>与ES5原型对象创建不同的是，class内部定义的方法是不可枚举的，ES5中原型对象的方法可枚举。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>

<span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person { eat: [Function] }</span></code></pre>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p>prototype</p>
<p>ES6中依旧存在prototype属性，虽然可以直接在类中定义方法，但是本质上还是定义在prototype上的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I am eating!</span></code></pre>
</li>
<li><p>静态属性</p>
<p>class本身的属性，用state关键字声明。<strong>静态属性、静态方法与类的普通属性、普通方法是两套机制，即使是同名属性和方法也不冲突，普通this指向普通属性，静态属性的this指向对应的静态属性。</strong></p>
</li>
<li><p>name</p>
<p>返回类名</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person</span></code></pre>
</li>
</ul>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>该方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类中必须有constructor方法，如果没有，一个空的constructor方法会被默认添加。</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>class通过extends和super关键字实现类的继承。</p>
<p>需要注意的是，在子类的构造函数中，只有调用super关键字后才能使用this，因为子类实例的构建基于父类实例，而只有super方法才能调用父类实例，<strong>所以this关键字必须在super之后</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address
    <span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can run'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can sing'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>address<span class="token punctuation">,</span>sId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sId <span class="token operator">=</span> sId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法可以重写</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can not run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'jx'</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I can sing</span>
s<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I can not run</span>
s<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I am eating</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//zs  1001</span></code></pre>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>React入门</title>
    <url>/posts/e289.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第十四章-React入门"><a href="#第十四章-React入门" class="headerlink" title="第十四章 React入门"></a>第十四章 React入门</h2><h3 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>React是Facebook内部的一个JavaScript类库。</p>
<p>React用于创建Web用户交互界面。</p>
<p>React不是一个完整的MVC框架，只负责MVC中的V(View)视图层，甚至React不认可MVC开发模式。</p>
<p>React的设计思想极其独特，属于革命性创新，性能出众，代码逻辑简单。</p>
<p>React引入了虚拟DOM(Virtual DOM)的机制。</p>
<p>React引入了组件化的思想，一切皆组件。</p>
<p>React使用Facebook专门为其开发的一套语法糖–jsx。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>虚拟DOM</p>
</li>
<li><p>组件化</p>
</li>
<li><p>JSX语法</p>
</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>组件化开发</li>
<li>引入虚拟DOM，性能好，响应速度快。</li>
<li>JSX语法</li>
<li>单向数据绑定</li>
<li>跨浏览器兼容</li>
<li>完善的生态圈和活跃的社区</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>不是完整的MVC框架</li>
<li>React本身不适合大型项目开发，但是如果要开发大型项目，可以借助react-router-dom、redux实现。</li>
</ul>
<h3 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h3><pre class=" language-shell"><code class="language-shell">#安装脚手架
cnpm i create-react-app -g

#创建项目
creeate-react-app reactdemo

#进入项目
cd reactdemo

#启动项目
npm start</code></pre>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>-public    服务器目录</p>
<p>​    favicon.ico     页面图标</p>
<p>​    index.html    页面主入口</p>
<p>​    manifest.json    页面配置文件</p>
<p>-src     项目源码</p>
<p>​    index.js     入口文件</p>
<p>​    App.js     根组件</p>
<p>​    App.test.js    根组件测试</p>
<p>​    index.css    全局css样式</p>
<p>​    App.css    根组件样式</p>
<p>​    serviceWorker.js    离线访问服务</p>
<p>index.js与App.js是最重要的文件，其他文件均可根据需求可有可无。</p>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import './index.css';</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import * as serviceWorker from './serviceWorker';</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token comment" spellcheck="true">// React.StrictMode为严格模式</span>
  <span class="token comment" spellcheck="true">//&lt;React.StrictMode></span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">//&lt;/React.StrictMode>,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// If you want your app to work offline and load faster, you can change</span>
<span class="token comment" spellcheck="true">// unregister() to register() below. Note this comes with some pitfalls.</span>
<span class="token comment" spellcheck="true">// Learn more about service workers: https://bit.ly/CRA-PWA</span>
<span class="token comment" spellcheck="true">// serviceWorker.unregister();</span></code></pre>
<h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import logo from './logo.svg';</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//return 里返回一段嵌套js的html代码</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>React中组件通过function App(){}中return返回，采用的是jsx语法。</p>
<p>()中书写html代码，{}中书写js代码，两者可以相互嵌套。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*一段注释*/</span><span class="token punctuation">}</span></code></pre>
<p>由于()中是html语法，所以不能直接使用<code>//</code>注释。也不能使用<code>{//}</code>注释。</p>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="非表单元素"><a href="#非表单元素" class="headerlink" title="非表单元素"></a>非表单元素</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> name <span class="token operator">=</span><span class="token string">"百度"</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>name<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h4 id="媒体元素-属性绑定"><a href="#媒体元素-属性绑定" class="headerlink" title="媒体元素/属性绑定"></a>媒体元素/属性绑定</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> imgUrl <span class="token operator">=</span> <span class="token string">""</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>采用三元运算符进行条件渲染</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>isShow <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>开启<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>结束<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre>
<h3 id="列表渲染-循环渲染"><a href="#列表渲染-循环渲染" class="headerlink" title="列表渲染/循环渲染"></a>列表渲染/循环渲染</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">':'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre>
<h3 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h3><p>React中的样式类名用className属性而不是class属性。</p>
<h4 id="动态类名"><a href="#动态类名" class="headerlink" title="动态类名"></a>动态类名</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*通过js逻辑选择类名*/</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h4 id="动态行间样式"><a href="#动态行间样式" class="headerlink" title="动态行间样式"></a>动态行间样式</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token string">"orange"</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span><span class="token string">"#fff"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>这里出现了双大括号，外面的大括号表示js语法，里面的括号表示一个json格式。</p>
<p>这里不能使用以前的写法直接在style属性写样式，比如以下写法是错误的：</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span><span class="token string">'orange'</span>,<span class="token property">color</span><span class="token punctuation">:</span><span class="token string">'#fff'</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="箭头函数绑定事件"><a href="#箭头函数绑定事件" class="headerlink" title="箭头函数绑定事件"></a>箭头函数绑定事件</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="bind绑定"><a href="#bind绑定" class="headerlink" title="bind绑定"></a>bind绑定</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>通过bind绑定，bind第一个参数是this。</p>
<h4 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h4><p>箭头函数绑定事件传参直接传</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>bind绑定事件第一个参数是this，想传递的参数从第二个开始。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h4><p>箭头函数绑定事件的event，通过箭头函数的参数传递event，而fun()中接收的位置可以自定义，如下第二个参数是event。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>bind绑定事件的event最后一个参数就是event，但是省略不写，接收的时候是最后一个参数接收。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p>jsx接近原生js，不像Vue有修饰符，React中阻止默认事件需要通过原生js的事件对象实现。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>注意：React中不能用return false来阻止默认事件。</p>
<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>也是采用原生js的事件对象实现。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="捕获事件"><a href="#捕获事件" class="headerlink" title="捕获事件"></a>捕获事件</h4><p>在事件名后加上Capture就是捕获事件。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClickCapture</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="弹窗案例"><a href="#弹窗案例" class="headerlink" title="弹窗案例"></a>弹窗案例</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token punctuation">,</span><span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>

state<span class="token operator">=</span><span class="token punctuation">{</span>
    hideTag <span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    hideTag <span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">stopPro</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        hideTag<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token function">hide2</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//实现vue中的.self</span>
    <span class="token comment" spellcheck="true">// if(e.target.className ==="mask"){</span>
    <span class="token comment" spellcheck="true">//     this.hide();</span>
    <span class="token comment" spellcheck="true">// }</span>

    <span class="token comment" spellcheck="true">//短路实现</span>
    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">'mask'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">rightClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//有生命周期</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment" spellcheck="true">// 阻止传播实现弹窗消失</span>
        <span class="token comment" spellcheck="true">//    &lt;div></span>
        <span class="token comment" spellcheck="true">//        &lt;button onClick={this.show.bind(this)}>mask&lt;/button></span>
        <span class="token comment" spellcheck="true">//        {this.state.hideTag ? ( </span>
        <span class="token comment" spellcheck="true">//        &lt;div className="mask" onClick={this.hide.bind(this)}></span>
        <span class="token comment" spellcheck="true">//         &lt;div className="content" onClick={this.stopPro.bind(this)}></span>
        <span class="token comment" spellcheck="true">//             &lt;p>你确定要删除吗？&lt;/p></span>
        <span class="token comment" spellcheck="true">//             &lt;div className="btn"></span>
        <span class="token comment" spellcheck="true">//                 &lt;button onClick={()=>this.hide()} >取消&lt;/button></span>
        <span class="token comment" spellcheck="true">//                 &lt;button onClick={(e)=>this.hide(e)} >确定&lt;/button></span>
        <span class="token comment" spellcheck="true">//             &lt;/div></span>
        <span class="token comment" spellcheck="true">//         &lt;/div></span>
        <span class="token comment" spellcheck="true">//   &lt;/div>): null}</span>
        <span class="token comment" spellcheck="true">//    &lt;/div></span>

        <span class="token comment" spellcheck="true">//判断是否点击自身实现弹窗消失</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onContextMenu</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rightClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>mask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hideTag <span class="token operator">?</span> <span class="token punctuation">(</span> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hide2<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你确定要删除吗？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ClassComponent</code></pre>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>与Vue一样，React中每个组件，但不同的是React中所有组件都是局部组件，要用需要引入，没有全局组件。</p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul>
<li>组件名字首字母必须大写</li>
<li>且与vue不同的是，React中组件名字中间出现大写字母是可以的，不需要改成‘-小’写的形式。</li>
</ul>
<h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><h5 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token punctuation">,</span><span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>
    name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//可以自定函数绑定事件</span>
<span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//有生命周期</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是一个类定义组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ClassComponent</code></pre>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>函数定义组件相对来说更简单，但是无法绑定事件，也没有生命周期。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span>
<span class="token keyword">function</span> <span class="token function">FunComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是一个函数定义组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> FunComponent</code></pre>
<h4 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> ClassComponent <span class="token keyword">from</span> <span class="token string">"./components/ClassComponent"</span>
<span class="token keyword">import</span> FunComponent <span class="token keyword">from</span> <span class="token string">"./components/FunComponent"</span>

<span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassComponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassComponent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre>
<h4 id="函数定义组件与类定义组件的区别"><a href="#函数定义组件与类定义组件的区别" class="headerlink" title="函数定义组件与类定义组件的区别"></a>函数定义组件与类定义组件的区别</h4><ul>
<li>类定义组件有生命周期，而函数定义的组件没有。</li>
<li>类定义组件接收父组件传递的值的this.props，函数定义的组件接收父组件传递的值是props。</li>
<li>类定义组件有state，函数定义的组件没有，state中数据改变会引起页面的重新渲染。</li>
</ul>
<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件通过自定义属性给子组件传值，函数定义的子组件通过函数参数接收，类定义的组件通过this.props接收。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*父组件传值给函数定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*父组件传值给类定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassCom</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassCom</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*类子组件接收父组件传的值*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*函数子组件接收父组件传的值*/</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">FunComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>父组件通过给子组件绑定自定义属性，值是一个函数，子组件通过this.props或者props触发。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*函数定义的子组件 函数接收一个参数props*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>props<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>childData<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*类定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>childDta<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassCom</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassCom</span><span class="token punctuation">></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-入门</title>
    <url>/posts/84c5.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第一章-Vue入门"><a href="#第一章-Vue入门" class="headerlink" title="第一章 Vue入门"></a>第一章 Vue入门</h2><h3 id="节点赋值（复习）"><a href="#节点赋值（复习）" class="headerlink" title="节点赋值（复习）"></a>节点赋值（复习）</h3><ul>
<li><p>非表单元素</p>
<p>js：innerHTML</p>
<p>jQuery：html()</p>
</li>
<li><p>表单元素</p>
<p>js：value()</p>
<p>jquery：val()</p>
</li>
<li><p>媒体元素</p>
<p>js：src</p>
<p>jQuery：attr(‘src’,‘1.jpg’)</p>
</li>
</ul>
<h3 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h3><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p>
<p>Vue是一款渐进式JavaScript框架，采用自底向上增量开发的设计，只关注视图层，易于上手。</p>
<p>Vue核心：数据驱动+组件系统</p>
<p>优点：</p>
<ul>
<li>模块友好化</li>
<li>易用、灵活、高校</li>
<li>SPA(single page application)单页面应用，用户体验好</li>
</ul>
<p>缺点：</p>
<ul>
<li>Vue不兼容ie8及以下版本</li>
<li>首屏加载慢</li>
<li>不利于SEO优化</li>
</ul>
<p>安装：</p>
<ul>
<li><p>CDN引入</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>NPM下载</p>
<pre class=" language-shell"><code class="language-shell">npm install vue</code></pre>
</li>
<li><p>cli（脚手架）</p>
<p>详见Vue组件章节。</p>
</li>
</ul>
<h3 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>
        src<span class="token punctuation">:</span><span class="token string">'1.jpg'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="el：挂载点"><a href="#el：挂载点" class="headerlink" title="el：挂载点"></a>el：挂载点</h4><ul>
<li>不能挂载到body、html上，要挂载到正常的元素上。</li>
<li>一个vue实例只能挂载到一个节点上，所以一般使用id选择器。</li>
<li>如果有好几个元素都满足el的选择，vue实例挂载到满足条件的第一个节点上。</li>
</ul>
<h4 id="data：属性"><a href="#data：属性" class="headerlink" title="data：属性"></a>data：属性</h4><p>存放vue对象的属性（变量），需要先声明后使用，且只有在vue对象内的变量才在该vue实例中有用。</p>
<h4 id="methods：方法"><a href="#methods：方法" class="headerlink" title="methods：方法"></a>methods：方法</h4><p>存放vue对象的方法。</p>
<h3 id="绑定数据（非表单元素）"><a href="#绑定数据（非表单元素）" class="headerlink" title="绑定数据（非表单元素）"></a>绑定数据（非表单元素）</h3><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>要在HTML元素中使用vue，可以使用双大括号，双大括号内必须使用js语法，但是每一个双大括号内只能有一句js，可以是变量、三目运算符、方法等，但是不能有if、for等，且双大括号内不能有{}。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> {{name+':'+age}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- zs:18 --></span></code></pre>
<p>优点：方便、简单</p>
<p>缺点：不能解析标签；首屏会出现闪屏问题（vue加载有延迟，造成双大括号暂时无法解析。）</p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>hello,<span class="token punctuation">'</span>+name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- hello,zs --></span></code></pre>
<p>优点：可以解析标签（一般用在首屏和详情页）</p>
<p>缺点：不方便</p>
<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>hello,<span class="token punctuation">'</span>+name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- hello,zs --></span></code></pre>
<p>缺点：不方便，不能解析标签。</p>
<h3 id="MVVM模式（表单元素）"><a href="#MVVM模式（表单元素）" class="headerlink" title="MVVM模式（表单元素）"></a>MVVM模式（表单元素）</h3><p>v-model</p>
<p>M-model模型、V-view视图、VM-viewModel视图模型</p>
<p>模型通过 视图模型 控制视图，视图通过 视图模型 修改模型。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- div中的name会随着input中的输入值改变而改变 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="属性绑定（媒体元素）"><a href="#属性绑定（媒体元素）" class="headerlink" title="属性绑定（媒体元素）"></a>属性绑定（媒体元素）</h3><p>v-bind</p>
<p>可以绑定已有或者自定义属性。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>src<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 可以简写成 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>src<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>注意点：当HTML标签的属性绑定了vue之后的变量之后，该属性后面引号内的值就是js语法，这里会出现数据类型的问题。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这里的age是字符串类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 这里的age是数值类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 这里的age是字符串类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>v-if：条件渲染，如果条件为true则节点显示，条件为false则节点消失（节点不加载/惰性加载）。</p>
<p>v-show：条件渲染，如果条件为true则节点显示，条件为false则节点消失（新增属性display：none）。</p>
<p>使用：频繁切换时使用v-show，不频繁切换使用v-if。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>false<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>v-else可以与v-if搭配使用，但是相邻的两个之间不能有任何元素间隔。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="循环渲染"><a href="#循环渲染" class="headerlink" title="循环渲染"></a>循环渲染</h3><p>v-for</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ul<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{index}}：{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'ul'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        comment<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'非常好'</span><span class="token punctuation">,</span><span class="token string">'一般般'</span><span class="token punctuation">,</span><span class="token string">'很棒，下次还来买！'</span><span class="token punctuation">,</span><span class="token string">'赞'</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>与key关键字搭配使用，实现Vue的v-for更新DOM时实现就地更新，只渲染被改变的DOM，提高更新性能。key后面跟上数据的唯一标识，并且用v-bind指令绑定该属性。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in data<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item.id<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="动态行间样式"><a href="#动态行间样式" class="headerlink" title="动态行间样式"></a>动态行间样式</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--语法--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value">json</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>bg<span class="token number">1</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">bg<span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>NNNN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        bg1<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>
        bg2<span class="token punctuation">:</span><span class="token punctuation">{</span>
            background<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span>
            borderRadius<span class="token punctuation">:</span><span class="token string">'5px'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="动态类名"><a href="#动态类名" class="headerlink" title="动态类名"></a>动态类名</h4><ul>
<li><p>变量：v-bind:class=‘变量’</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>三元运算符：:class=‘[逻辑]’，虽然不用[]也可以实现，但是Vue官方建议用[]包裹运算逻辑。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--通过控制isRed变量的值来控制选择是red类名还是blue类名，这种情况只能控制两种类--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[isRed?<span class="token punctuation">'</span>red<span class="token punctuation">'</span>:<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>多类名使用：:class=“{class1:true,class2:false,…}”，类名后面可以跟逻辑运算，该方法可以便捷实现隔行变色。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>0,<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>1,<span class="token punctuation">'</span>yellow<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-监听器、计算属性、过滤器和过渡动画</title>
    <url>/posts/26f7.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第三章-Vue监听器、计算属性、过滤器和过渡动画"><a href="#第三章-Vue监听器、计算属性、过滤器和过渡动画" class="headerlink" title="第三章 Vue监听器、计算属性、过滤器和过渡动画"></a>第三章 Vue监听器、计算属性、过滤器和过渡动画</h2><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>Vue提供了watch选择项，这是一个更通用的方法来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有效的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//浅监听，参数可省略</span>
        <span class="token function">value</span><span class="token punctuation">(</span>newV<span class="token punctuation">,</span>oldV<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//逻辑</span>
        <span class="token punctuation">}</span>，
        <span class="token comment" spellcheck="true">//深度监听不建议使用，因为会造成页面卡顿，如果要使用的话，建议转换成简单类型使用。</span>
        json<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//逻辑</span>
            <span class="token punctuation">}</span>，
            deep<span class="token punctuation">:</span><span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>注意：优就业课本上说监听数组也需要深度监听，但是亲测，监听数组不需要深度监听，浅监听就可以，不管是一层还是嵌套多层。如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>arr[0]<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arr1[2][1]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        arr1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr改变了！'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">arr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr1改变了！"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//改变输入框的值，均能触发监听器。</span></code></pre>
<p>有博主分析Vue源码得出结论，watch监听判断的是数据否是对象类型，是对象类型则必须使用深度监听，不论是一层才是多层。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue允许自定义过滤器，可用于一些常见的文本格式化。</p>
<p>目的：转换数据</p>
<p>使用： 双括号、v-bind</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--{{ | }}--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    {{变量 | 过滤器名称}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--v-bind，该方法从2.1.0版本之后开始支持--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变量 | 过滤器名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>定义：推荐全局定义</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局定义</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"过滤器名称"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>过滤对象<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//逻辑 </span>
    <span class="token keyword">return</span> <span class="token string">"你要的结果"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//局部定义</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    filters<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//全局定义</span>
        <span class="token function">过滤器名称</span><span class="token punctuation">(</span>过滤对象<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//逻辑 </span>
            <span class="token keyword">return</span> <span class="token string">"你要的结果"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>Vue提供了计算属性，它不需要在data里面定义，就能返回需要的值，并且能进行大量计算。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    computed<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算属性</span>
        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">10</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">ava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//运算逻辑</span>
            <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
                sum<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">.</span>score
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//通过return返回</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>sum<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>在Vue中，计算属性可以被视为是data一样的，可以读取和设值，因此在计算属性中可以分成getter和setter，一般情况下是没有setter的，computed预设只有getter，也就是只能读取，不能改变，设值，但是可以通过依赖变量改变值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        b<span class="token punctuation">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//计算属性</span>
        c<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c被获取了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//设置的值</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set：'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//实际c的值</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>a<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>b<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>=
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>原始状态</p>
<img src="/posts/26f7/3-1.png" class="">

<p>改变a时，get()方法被调用。</p>
<img src="/posts/26f7/3-2.png" class="">

<p>改变c绑定的输入框，c的值并不会被改变，只是set()方法被调用了。</p>
<img src="/posts/26f7/3-2.png" class="">

<p>注意：</p>
<p>1、v-for和v-if不能作用在同一个标签，虽然有时候有效果，但是Vue官方声明该语法不合法。这时候可以用计算属性computed解决该方面的需求。</p>
<p>参考：<a href="https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8">https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8</a></p>
<p>2、如果数组数据改变，页面不渲染，可以采用以下方法解决。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1、this.arr.splice(下标,1,新值);</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//2、vm.$set(arr,下标,新值)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//3、Vue.set(arr,下标,新值)</span>
Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span></code></pre>
<p>3、如果是json数据发生了改变，页面不渲染，可以用以下方法解决。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1、vm.$set</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>json<span class="token punctuation">,</span>改变的属性<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//2、Vue.set</span>
Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>json<span class="token punctuation">,</span>改变的属性<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>ajax不能跨域 get、post</p>
<p>jsonp可以跨域，只能以 get方式请求</p>
<p>jsonp跨域的要求：提供回调函数（一般是callback或cb）和数据接口的规则。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        results<span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//console.log(this.value)</span>
                <span class="token comment" spellcheck="true">//创建script标签</span>
                <span class="token keyword">var</span> os <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//设置src属性</span>
                os<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://api.asilu.com/fanyi?callback=cbb&amp;q="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//将src属性添加到页面中</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//回调函数必须是全局函数</span>
<span class="token keyword">function</span> <span class="token function">cbb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vm<span class="token punctuation">.</span>results <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>Vue在插入、更新或者移除DOM时，提供多种不同方式的应用过渡效果，包括以下工具：</p>
<ul>
<li>在CSS过渡和动画中自动应用class</li>
<li>可以配合使用第三方CSS动画库，如Animate.css</li>
<li>在过渡钩子函数中使用js直接操作DOM</li>
<li>配合使用第三方js动画库，如Velocity.js</li>
</ul>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p> Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡 。</p>
<ul>
<li>条件渲染（v-if）</li>
<li>条件展示（v-show）</li>
<li>动态组件</li>
<li>路由</li>
</ul>
<p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p>
<ul>
<li>1-自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li>
<li>2-如果过渡组件提供了 <a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90">JavaScript 钩子函数</a>，这些钩子函数将在恰当的时机被调用。</li>
<li>3-如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 <code>nextTick</code> 概念不同)</li>
</ul>
<h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p> 在进入/离开的过渡中，会有 6 个 class 切换：</p>
<ul>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>!isshow<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>animate<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isshow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>，则 `v-` 是这些类名的默认前缀。如果你使用了 </code>（如上面取名为<code>‘animate’</code>），那么 <code>v-enter</code> 会替换为<code>animate-enter</code>。 </p>
<p> <code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线 。</p>
<p>这里只简要介绍了Vue动画的部分内容，详情参考<a href="https://cn.vuejs.org/v2/guide/transitions.html">官网</a>。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-表单数据绑定、修饰符和生命周期</title>
    <url>/posts/a0dc.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第二章-Vue表单数据绑定、修饰符、生命周期"><a href="#第二章-Vue表单数据绑定、修饰符、生命周期" class="headerlink" title="第二章 Vue表单数据绑定、修饰符、生命周期"></a>第二章 Vue表单数据绑定、修饰符、生命周期</h2><h3 id="表单数据绑定"><a href="#表单数据绑定" class="headerlink" title="表单数据绑定"></a>表单数据绑定</h3><p>所有表单元素都可以使用v-model绑定数据。</p>
<h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>表单中的文本包括文本框和文本域，都可以通过v-model进行数据的双向绑定。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>value<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>value<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre>
<h5 id="单选钮"><a href="#单选钮" class="headerlink" title="单选钮"></a>单选钮</h5><p>单选钮中v-model绑定的是value，哪一个被选中，被绑定的变量的值就是对应的value值。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>sex<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>man<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>男
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>sex<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>women<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>女
<span class="token comment" spellcheck="true">&lt;!--男被选中sex值为man，女被选中sex值为women--></span></code></pre>
<h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><p>复选框中，v-model绑定的也是value，但是区分单个和多个。</p>
<p>如果只有一个复选框或者绑定的变量hobby为一个字符串（这种情况即使有多个复选框，只要改变一个复选框的状态，其他复选框状态也会跟着被改变。），则hobby的值为true（被选中）或false（未选中）。</p>
<p>如果被绑定的变量hobby为一个数组，则数组的值就是对应的value值，值的排列顺序为复选框被选中的先后顺序。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>音乐
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>舞蹈
<span class="token comment" spellcheck="true">&lt;!--依次选中舞蹈和音乐，hobby的值为['1','0']--></span></code></pre>
<p>拓展：上述案例中如果需要把hobby的值变为数值类型，则需要<strong>在被绑定的属性前使用v-bind指令，将被绑定的属性后面变为js语法</strong>，如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>音乐
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>舞蹈
<span class="token comment" spellcheck="true">&lt;!--依次选中舞蹈和音乐，hobby的值为[1,0]--></span></code></pre>
<h5 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h5><p>v-model绑定选择列表（列表多选需要加上mutiple属性），和复选框一样，被选择的选项的value组成数组。</p>
<h4 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h4><ul>
<li>.lazy-默认情况下通常是输入数据时绑定数据，如果加上了改修饰符，则被绑定的值不会立即改变，而是会等到输入框失去焦点时改变。</li>
<li>.number-将绑定的数据的数据类型转为number类型，当然，仅限数值类型的字符串。</li>
<li>.trim-该修饰符能够自动过滤用户输入的首尾空白字符串。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 可以简写成如下 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--当函数没有参数时，可以省略括号--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<h4 id="事件对象：-event"><a href="#事件对象：-event" class="headerlink" title="事件对象：*$event*"></a>事件对象：*<code>$event</code>*</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--显示获取event对象--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun($event)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--隐式获取event对象，绑定函数时，圆括号不写，默认参数就是event对象。如果写了圆括号但是没有参数，则e就是undefined。--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="阻止事件默认行为"><a href="#阻止事件默认行为" class="headerlink" title="阻止事件默认行为"></a>阻止事件默认行为</h4><p>vue修饰符写法：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@contextmenu.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止右键默认行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--还可以搭配按键码使用--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@keydown.38.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止上方向键的按下默认行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--38代表的是上方向键，在输入框中输入文字后按下上方向键焦点会从文字末尾跳到文字最前面，有些情况需要阻止该默认行为。--></span>
</code></pre>
<p>也可以在函数中自动阻止：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//由于vue不支持低版本，不需要考虑低版本兼容。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>原生兼容封装写法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h4><p>vue修饰符写法：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止点击事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>在函数中手动阻止：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//由于vue不支持低版本，不需要考虑低版本兼容。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>原生兼容封装写法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul>
<li>.prevent-阻止默认行为</li>
<li>.stop-阻止事件传播</li>
<li>.once-控制指定的事件只执行一次</li>
<li>.self-触发的目标元素是自身才执行</li>
<li>.capture-捕获</li>
<li>.native-解决组件绑定不上事件</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--阻止右击默认事件--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">@contextmenu.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h4><p>键盘修饰符可以是按键名称，也可以时是对应的编码值。</p>
<ul>
<li>.left(.37)</li>
<li>.up(.38)</li>
<li>.right(.39)</li>
<li>.down(.40)</li>
<li>.enter(.13)</li>
<li>.tab</li>
<li>.delete(包括delete和backspace键)</li>
<li>.esc</li>
<li>.space-特定键盘按键的修饰符。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.left.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h4><ul>
<li>.left-鼠标左键</li>
<li>.middle-鼠标中间滚轮</li>
<li>.right-鼠标右键</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<p>注意和上面的键盘修饰符区分，前面的事件有所不同。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Vue实例在被创建之前都要有一个初始化过程，有一个完整的生命周期，也就是从创建开始、数据初始化、编译模板、挂载DOM、渲染、更新、卸载等一系列过程，被称为Vue的生命周期。同时在这个过程中也会运行一些叫做声明周期钩子的函数，可以在不同阶段的函数内添加代码。</p>
<img src="/posts/a0dc/2-1.png" class="">



<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'百念成诗'</span><span class="token punctuation">,</span>
        nowTime<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">'甄姬'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">"虞姬"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            name<span class="token punctuation">:</span> <span class="token string">'阿离'</span>
          <span class="token punctuation">}</span>
         <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/*-------------------创建期：创建vue实例--------------------*/</span>
    <span class="token comment" spellcheck="true">//创建之前</span>
    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'创建之前'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//创建完成：vue实例数据初始化完成，el还是undefined</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"创建完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/*--------------------挂载期---------------------------*/</span>
    <span class="token comment" spellcheck="true">//挂载之前：找到了要挂载的节点，但是{{}}、指令等还没有被解析。</span>
    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"挂载之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//挂载完成：页面初始化完成，可以进行开启计时器、轮播图、Ajax、操作DOM节点、给window/document添加事件等。</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"挂载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/*----------------更新期----------------*/</span>
    <span class="token comment" spellcheck="true">//页面更新之前：不是数据变化之前，而是数据以及变了，页面重新渲染之前。</span>
    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"更新之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//页面更新完成：数据变了，页面再次渲染完成</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"更新完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/*-----------------销毁期--------------*/</span>
    <span class="token comment" spellcheck="true">//卸载之前：善后工作。清除定时器、轮播图、window/document置空等</span>
    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"销毁之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//卸载完成</span>
    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"销毁完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//点击按钮销毁vue实例，$destory()方法可以触发beforeDestory函数</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//点击挂载到指定标签，$mount()方法可以触发beforeMount函数</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`

`</span></span><span class="token template-string"><span class="token string">``</span></span>html
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>br<span class="token operator">></span>
    <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>当前时间：<span class="token punctuation">{</span><span class="token punctuation">{</span>nowTime<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">'item in arr'</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">'item.id'</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
    <span class="token operator">&lt;</span>button<span class="token operator">></span>销毁vue实例<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button<span class="token operator">></span>挂载vue实例<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>包与NPM</title>
    <url>/posts/9c2a.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="包与NPM"><a href="#包与NPM" class="headerlink" title="包与NPM"></a>包与NPM</h2><h3 id="NPM概述"><a href="#NPM概述" class="headerlink" title="NPM概述"></a>NPM概述</h3><p><strong>模块</strong>：按照CommonJS规范写的js文件。</p>
<p><strong>包</strong>：包含js文件和其他附带信息的整体。</p>
<p><strong>npm</strong>：包的管理工具。</p>
<ul>
<li>根据包的名字下载并安装（npmjs.com）。</li>
<li>解决了包之间的依赖关系。</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><pre class=" language-shell"><code class="language-shell">npm install <Module Name>
#简写
npm i <Module Name></code></pre>
<p>如果不指定包名，就会在项目的package.json中寻找相关依赖包并下载。</p>
<h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><pre class=" language-shell"><code class="language-shell">npm uninstall <Module Name></code></pre>
<p>卸载全局安装的包需要加上*<code>-g</code>*。</p>
<h4 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h4><pre class=" language-shell"><code class="language-shell">npm update <Module Name></code></pre>
<h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h4><pre class=" language-shell"><code class="language-shell">npm search <Module Name></code></pre>
<h4 id="查看包"><a href="#查看包" class="headerlink" title="查看包"></a>查看包</h4><pre class=" language-shell"><code class="language-shell">#查看当前目录下已经安装的包
npm list
#查看全局安装的包
npm list -g
#查看某个包的版本号
npm list <Module Name></code></pre>
<h4 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h4><pre class=" language-shell"><code class="language-shell">npm -v</code></pre>
<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>package.json记录npm对包管理的信息。</p>
<ul>
<li><strong>name</strong> - 包名。</li>
<li><strong>version</strong> - 包的版本号。</li>
<li><strong>description</strong> - 包的描述。</li>
<li><strong>homepage</strong> - 包的官网 url 。</li>
<li><strong>author</strong> - 包的作者姓名。</li>
<li><strong>contributors</strong> - 包的其他贡献者姓名。</li>
<li><strong>dependencies</strong> - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>
<li><strong>devDependencies</strong>-开发依赖包列表，将安装包放在c盘/usr/local下或者node的安装目录。</li>
<li><strong>repository</strong> - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>
<li><strong>main</strong> - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li>
<li><strong>keywords</strong> - 关键字</li>
</ul>
<pre class=" language-shell"><code class="language-shell">#输入npm init之后，根据自己情况输入包的信息，输入完成后会生成package.json文件。
npm init
#然后使用以下命令在npm资源库中注册用户
npm adduser
#然后使用以下命令来发布模块，模块发布之后就可以使用npm下载使用了
npm publish</code></pre>
<h3 id="局部安装-本地安装"><a href="#局部安装-本地安装" class="headerlink" title="局部安装/本地安装"></a>局部安装/本地安装</h3><p>将安装包放在./node_modules下（运行npm命令时所在的目录），如果没有该目录，会在当前执行npm命令的目录下生成node_modules目录。</p>
<p>可以通过require()用来引入本地安装的包。</p>
<pre class=" language-shell"><code class="language-shell"># 本地安装express
npm install express</code></pre>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>将安装包放在c盘/usr/local下或者node的安装目录。</p>
<p>可以直接在命令行里使用。</p>
<pre class=" language-shell"><code class="language-shell"># 全局安装express
npm install express -g</code></pre>
<h3 id="淘宝镜像cnpm"><a href="#淘宝镜像cnpm" class="headerlink" title="淘宝镜像cnpm"></a>淘宝镜像cnpm</h3><p>使用淘宝镜像进行安装npm包，淘宝npm镜像是一个完整的npmjs.org镜像，目前同步频率为10分钟与官网同步一次。</p>
<h4 id="方法一：临时使用"><a href="#方法一：临时使用" class="headerlink" title="方法一：临时使用"></a>方法一：临时使用</h4><pre class=" language-shell"><code class="language-shell">npm --registry https://registry.npm.taobao.org install <Module Name></code></pre>
<h4 id="方法二：永久使用"><a href="#方法二：永久使用" class="headerlink" title="方法二：永久使用"></a>方法二：永久使用</h4><p>将配置文件下载源改为淘宝镜像，然后就可以使用cnpm或npm命令安装。</p>
<pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.org</code></pre>
<p>可以用*<code>npm config get registry</code>*验证配置是否成功。</p>
<h4 id="方法三：不改下载源镜像，用cnpm。（不推荐使用）"><a href="#方法三：不改下载源镜像，用cnpm。（不推荐使用）" class="headerlink" title="方法三：不改下载源镜像，用cnpm。（不推荐使用）"></a>方法三：不改下载源镜像，用cnpm。（不推荐使用）</h4><pre class=" language-shell"><code class="language-shell">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>
<p>然后就可以使用cnpm代替npm。</p>
<h4 id="恢复npm使用"><a href="#恢复npm使用" class="headerlink" title="恢复npm使用"></a>恢复npm使用</h4><pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npmjs.org</code></pre>
<h3 id="依赖和开发依赖"><a href="#依赖和开发依赖" class="headerlink" title="依赖和开发依赖"></a>依赖和开发依赖</h3><p><strong>开发依赖</strong>（devDependencies）：像less这种只有在开发的时候用到的，在项目运行的时候是不需要的，就是开发依赖。在安装开发依赖时，需要加上*<code>--save-dev</code><em>，可以简写成</em><code>-D</code>*。</p>
<p><strong>依赖</strong>（dependencies）：像jQuery这种不管是运行期还是开发期都需要的，就属于依赖，需要包含在项目中。在安装依赖包时，需要加上*<code>--save</code><em>，可以简写成</em><code>-S</code>*。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS面试题</title>
    <url>/posts/e27a.html</url>
    <content><![CDATA[<h1 id="优就业大前端第一阶段（HTML-CSS）面试题"><a href="#优就业大前端第一阶段（HTML-CSS）面试题" class="headerlink" title="优就业大前端第一阶段（HTML+CSS）面试题"></a>优就业大前端第一阶段（HTML+CSS）面试题</h1><h2 id="第一章-HTML入门"><a href="#第一章-HTML入门" class="headerlink" title="第一章 HTML入门"></a>第一章 HTML入门</h2><h3 id="1、简述-lt-doctype-gt-的作用？"><a href="#1、简述-lt-doctype-gt-的作用？" class="headerlink" title="1、简述<!doctype>的作用？"></a>1、简述&lt;!doctype&gt;的作用？</h3><blockquote>
<p>‘’ 决定浏览器渲染方式。表示用HTML5的doctype声明文件包含HTML5标记。</p>
<p>‘&lt;!DOCTYPE&gt;’:告知浏览器当前的HTML或XML文档是哪一个版本。Doctype是一条声明，而不是一个标签，也可以把它叫做“文档类型声明”或者简称为“DTD”。</p>
</blockquote>
<h3 id="2、常见的浏览器及其内核？"><a href="#2、常见的浏览器及其内核？" class="headerlink" title="2、常见的浏览器及其内核？"></a>2、常见的浏览器及其内核？</h3><blockquote>
<p>谷歌(chrome)浏览器 – webkit –Blink</p>
</blockquote>
<blockquote>
<p>苹果(Safari) –webkit</p>
</blockquote>
<blockquote>
<p>IE浏览器 –trident</p>
</blockquote>
<blockquote>
<p>欧鹏浏览器(Opera) –Presto –webkit –Blink</p>
</blockquote>
<blockquote>
<p>火狐浏览器(Firefox) –Gecko</p>
</blockquote>
<h3 id="3、b和strong，i和em标签的区别？"><a href="#3、b和strong，i和em标签的区别？" class="headerlink" title="3、b和strong，i和em标签的区别？"></a>3、b和strong，i和em标签的区别？</h3><blockquote>
<p>b、i属于修饰类标签属于物理标签，没有做到结构与样式分离。strong、em属于内容类标签属于逻辑标签，做到了结构与样式分离。</p>
</blockquote>
<blockquote>
<p>strong和em都表示强调，strong比em语气更强烈。</p>
</blockquote>
<blockquote>
<p>在搜索引擎优化strong和em比b和i重要的多。</p>
</blockquote>
<h3 id="4、谈谈对语义化的理解？"><a href="#4、谈谈对语义化的理解？" class="headerlink" title="4、谈谈对语义化的理解？"></a>4、谈谈对语义化的理解？</h3><blockquote>
<p>概念：</p>
<blockquote>
<p>用合理的HTML标签及其特有的属性去格式化文档内容。如标题用h1-h6、段落用p，合理地设置图片的alt属性。</p>
</blockquote>
</blockquote>
<blockquote>
<p>好处：</p>
<blockquote>
<ul>
<li>在没有css的情况下，页面也能呈现出很好的内容结构。  </li>
<li>使代码更具可读性，便于开发和后期维护。  </li>
<li>有利于用户体验。如title、label标签、alt属性的灵活运用。  </li>
<li>有利于SEO。网页和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息。爬虫依赖于标签来确定上下文和各个字段关键字的权重。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="第二章-CSS入门"><a href="#第二章-CSS入门" class="headerlink" title="第二章 CSS入门"></a>第二章 CSS入门</h2><h3 id="1、css引入方式有哪些？"><a href="#1、css引入方式有哪些？" class="headerlink" title="1、css引入方式有哪些？"></a>1、css引入方式有哪些？</h3><blockquote>
<p>行内样式、内部样式表（内嵌式）、外部样式表（外链式）</p>
</blockquote>
<h3 id="2、css基本选择器有哪些？"><a href="#2、css基本选择器有哪些？" class="headerlink" title="2、css基本选择器有哪些？"></a>2、css基本选择器有哪些？</h3><blockquote>
<p>通配符选择器、标签选择器、类选择器、id选择器</p>
</blockquote>
<h3 id="3、如何合并表格单元格？"><a href="#3、如何合并表格单元格？" class="headerlink" title="3、如何合并表格单元格？"></a>3、如何合并表格单元格？</h3><blockquote>
<p>跨行合并rowspan  </p>
</blockquote>
<blockquote>
<p>跨列合并colspan </p>
</blockquote>
<blockquote>
<p>补充：边框合并border-collapse:collapse;</p>
</blockquote>
<h3 id="4、caption、thead、tbody、tfoot有什么用？"><a href="#4、caption、thead、tbody、tfoot有什么用？" class="headerlink" title="4、caption、thead、tbody、tfoot有什么用？"></a>4、caption、thead、tbody、tfoot有什么用？</h3><blockquote>
<p>这些标签能增强语义化，让表格结构更加清晰，对布局不会产生影响。</p>
</blockquote>
<h2 id="第三章-盒模型"><a href="#第三章-盒模型" class="headerlink" title="第三章 盒模型"></a>第三章 盒模型</h2><h3 id="1、常见的表单元素有哪些？"><a href="#1、常见的表单元素有哪些？" class="headerlink" title="1、常见的表单元素有哪些？"></a>1、常见的表单元素有哪些？</h3><blockquote>
<p>input标签(text、password、button、radio、checkbox、submit、reset、file、image)，select标签、textarea标签、button标签</p>
</blockquote>
<h3 id="2、请简述一下盒模型的组成？"><a href="#2、请简述一下盒模型的组成？" class="headerlink" title="2、请简述一下盒模型的组成？"></a>2、请简述一下盒模型的组成？</h3><blockquote>
<p>content、padding、border、margin</p>
</blockquote>
<h3 id="3、css复合选择器有哪些？"><a href="#3、css复合选择器有哪些？" class="headerlink" title="3、css复合选择器有哪些？"></a>3、css复合选择器有哪些？</h3><blockquote>
<p>后代选择器、子代选择器、并集选择器、交集选择器、伪类链接选择器</p>
</blockquote>
<h2 id="第四章-浮动"><a href="#第四章-浮动" class="headerlink" title="第四章 浮动"></a>第四章 浮动</h2><h3 id="1、块级标签、行内块标签、行内标签的区别？"><a href="#1、块级标签、行内块标签、行内标签的区别？" class="headerlink" title="1、块级标签、行内块标签、行内标签的区别？"></a>1、块级标签、行内块标签、行内标签的区别？</h3><blockquote>
<p>块级标签:div、p、h1-h6、ul、ol、li、dl、dt、dd、hr、form  </p>
<blockquote>
<ul>
<li>独占一行，上下排列。 </li>
<li>默认宽度占满父级，默认高度是本身内容的高度。</li>
<li>可以设置宽高及所有盒模型属性。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>行内标签:label、span、a、b、strong、i、em、sub、sup、del</p>
<blockquote>
<ul>
<li>默认并排，宽高由内容撑开。  </li>
<li>行内元素只能容纳文本或其他内联元素(行内元素)，不能镶嵌块级元素。</li>
<li>行标签之间有间隙、不能设置上下内外边距，可以设置左右内外边距。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>行内块标签:input、img、select、textarea、button</p>
<blockquote>
<ul>
<li>默认并排，可以设置宽高。</li>
<li>中间有间距，可以设置盒模型的所有属性。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、浮动产生的问题？清除浮动的方案？"><a href="#2、浮动产生的问题？清除浮动的方案？" class="headerlink" title="2、浮动产生的问题？清除浮动的方案？"></a>2、浮动产生的问题？清除浮动的方案？</h3><blockquote>
<p>产生的问题（浮动是为了实现文字环绕图片而产生）</p>
<blockquote>
<p>子标签浮动后脱离文档流，导致父标签高度塌陷，会影响后续正常布局。</p>
</blockquote>
</blockquote>
<blockquote>
<p>清楚浮动的方法</p>
<blockquote>
<ul>
<li><p>给浮动的父标签固定高度（不够灵活）。</p>
</li>
<li><p>给父标签加overflow属性，overflow为visible以外的其他值时（即把父标签设置成BFC）可以帮助实现。</p>
</li>
<li><p>给浮动标签的最后加一个空块标签，标签本身不浮动，且添加样式clear:both;(代码冗余，不建议)</p>
</li>
<li><p>(推荐方法)给浮动标签的父标签添加.clearfix（不会在结构上产生代码冗余，可多次重复使用）。</p>
</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
   <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span>
   *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> //为了兼容ie<span class="token number">7</span>及以下。
<span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<h3 id="3、伪元素如何创建？"><a href="#3、伪元素如何创建？" class="headerlink" title="3、伪元素如何创建？"></a>3、伪元素如何创建？</h3><blockquote>
<p>在元素的开头（第一个子元素之前）添加</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token number">...</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<blockquote>
<p>在元素的末尾（第一个子元素之后）添加</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token number">...</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<h2 id="第五章-定位"><a href="#第五章-定位" class="headerlink" title="第五章 定位"></a>第五章 定位</h2><h3 id="1、如何实现盒子的水平垂直居中？"><a href="#1、如何实现盒子的水平垂直居中？" class="headerlink" title="1、如何实现盒子的水平垂直居中？"></a>1、如何实现盒子的水平垂直居中？</h3><blockquote>
<p>文本/行内块水平居中：</p>
<blockquote>
<p>父标签text-align:center;</p>
</blockquote>
</blockquote>
<blockquote>
<p>文本/行内块垂直居中：</p>
<blockquote>
<ul>
<li>line-height:height;</li>
<li>父标签padding-top=padding-bottom  </li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>块元素水平居中：</p>
<pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*需要固定宽度*/</span></code></pre>
</blockquote>
<blockquote>
<p>块元素垂直居中：</p>
<blockquote>
<ul>
<li>调节margin、padding</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>绝对定位（父元素尺寸变化，子元素尺寸固定）</li>
</ul>
<pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>
   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
   <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span>；
   top：<span class="token number">50%</span>；
   <span class="token comment" spellcheck="true">/* 再移动子元素宽度和高度的一半 */</span>
   <span class="token property">margin-left</span><span class="token punctuation">:</span>-<span class="token number">100</span>px<span class="token punctuation">;</span>
   <span class="token property">margin-top</span><span class="token punctuation">:</span>-<span class="token number">100</span>px<span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>绝对定位（父元素和子元素的尺寸都是可变的）</li>
</ul>
<pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
   <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">/*如果还想实现水平居,可以加上:*/</span>
   <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>采用Flex弹性布局 （该方法适用于行内、行内块、块级标签）<br>父元素设置display:flex;<br>align-items: center;（子元素对齐方式）<br>水平居中还需要加上：justify-content:center;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>采用表格布局（该方法适用于行内、行内块、块级标签,但不常用）<br>设置父标签display:table;<br>子标签display:table-cell;vertical:middle;<br>如下：</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="wrapper">
   &lt;p>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊a我要垂直居中啊a&lt;/p>
&lt;/div>

<span class="token class">.wrapper</span></span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> p</span><span class="token punctuation">{</span>
 <span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*该属性使该元素成为单元格，宽高无效，margin无效，宽度由内容撑开*/</span>
 <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">/*如果还想实现水平居中,加上:*/</span>
 <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<h2 id="第六章-布局技巧"><a href="#第六章-布局技巧" class="headerlink" title="第六章 布局技巧"></a>第六章 布局技巧</h2><h3 id="1、图片下方空白间隙如何解决？"><a href="#1、图片下方空白间隙如何解决？" class="headerlink" title="1、图片下方空白间隙如何解决？"></a>1、图片下方空白间隙如何解决？</h3><blockquote>
<p>水平空白</p>
<blockquote>
<ul>
<li>图片浮动(不建议)  </li>
<li>父元素设置font-size:0;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>垂直间隙</p>
<blockquote>
<ul>
<li>图片浮动(不建议)  </li>
<li>父元素设置font-size:0或line-height:0;  </li>
<li>图片设置vertical-align:middle; //任意不为baseline的值都可以，因为基线对齐会使基线以下的部分空出来。</li>
<li>图片设置display:block;</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。"><a href="#2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。" class="headerlink" title="2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。"></a>2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。</h3><blockquote>
<p>等高布局</p>
<blockquote>
<ul>
<li>伪等高</li>
</ul>
<blockquote>
<ul>
<li>边框模拟<br>原理：因为元素边框和元素高度始终是相同高度，用元素的边框颜色来伪装左右两个兄弟元素的背景色。然后将左右两个透明背景的元素使用absolute覆盖在中间元素的左右边框上，实现视觉上的等高效果。注意:左右两侧元素的内容高度不能大于中间元素内容高度，否则无法撑开容器高度。</li>
<li>内外边距相消<br>因为背景是在padding区域显示的，设置一个大数值的padding-bottom，再设置相同数值的负的margin-bottom，使背景色铺满元素区域，又符合元素的盒模型的计算公式（实际宽高=内容+内边距+边框+外边距），实现视觉上的等高效果。注意：父元素要设置overflow:hidden。如果页面中使用a锚点跳转时，将会隐藏部分文字信息。如果页面中的背景图片定位到底部，将会看不到背景图片。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>真等高</li>
</ul>
<blockquote>
<ul>
<li>背景嵌套<br>利用内容撑开父元素的特点，给每一列添加一个背景容器，并且相互嵌套，等高元素在最里层的背景容器中且同级。背景容器使用相对定位往外移，相应的等高元素也利用margin移到对应的容器里，只要有一个等高元素的高度发生变化，就会撑开套在最里层的背景容器，其他套在外层的背景容器高度也随之变化。（讲义p59页）</li>
<li>绝对定位<br>所有子元素设置绝对定位，各元素通过绝对定位移到父元素的左中右位置，子元素由于脱离了文档流不占位，无法撑开父元素高度，需要设置父元素的固定高度，并且所有子元素的top:0;bottom:0;(这两个设置才是使子元素高度与父元素同高的关键。)，就可以使得所有子元素的高度都和父元素的高度相同，实现等高效果。</li>
<li>表格布局<br>table元素中的table-cell元素默认是等高的，将父元素设置成display:table;等高子元素设置成display:table-cell;即可。</li>
<li>Flex弹性盒布局<br>flex弹性盒中的项目如果未设置高度或高度为auto，则交叉轴方向默认占满容器的高度，再配合justify-content属性调整项目位置，即可实现等高效果。</li>
<li>Grid网格布局<br>grid网格布局在不设置行数（默认一行）时，设置grid-auto-flow:column;(先列后行)，每列项目默认占满一列的高度即父容器的高度，即可实现等高布局。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>圣杯布局、双飞翼布局</p>
<blockquote>
<p>共同点:<br>中间栏放最前面，左右标签固定宽度，中间标签宽度百分百，三个标签左浮动，左边元素margin:-100%移到第一行最左边，右边元素利用marigin:-自身宽度  移到第一行最右边。<br>圣杯解决方案：三个标签的父容器左右分别设置等于左右元素宽度的padding，再利用相对定位移动左右元素。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>双飞翼解决方案：给中间栏加一个内层inner，并给inner添加等于左右两栏宽度的外边距（其实内边距也可以）。（不能直接给中间栏设置内外边距，因为中间栏设置了width:100%,直接给中间栏加内外边距会导致界面宽度加大。）</p>
</blockquote>
</blockquote>
<h2 id="第七章-CSS技巧"><a href="#第七章-CSS技巧" class="headerlink" title="第七章 CSS技巧"></a>第七章 CSS技巧</h2><h3 id="1、简述css精灵图原理，及优缺点？"><a href="#1、简述css精灵图原理，及优缺点？" class="headerlink" title="1、简述css精灵图原理，及优缺点？"></a>1、简述css精灵图原理，及优缺点？</h3><blockquote>
<p>原理:<br>css sprites，通常被解释为”CSS图像拼合”或”CSS贴图定位”，就是把网页中一些背景图片整合到一张图片文件中，再利用background-image、background-repeat、background-position等属性的组合进行背景定位，background-position用数字能精确地定位出来背景图片的位置，一般适用于小图标，不适合大背景。 </p>
</blockquote>
<blockquote>
<p>优点：  </p>
<blockquote>
<ul>
<li>减少网页的http请求，从而大大提高网页的性能；</li>
<li>减少图片命名上的困扰；</li>
<li>更换风格方便。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>缺点：  </p>
<blockquote>
<ul>
<li>必须要限定容器的大小符合背景图元素，需要计算；</li>
<li>需要测量背景图所在的位置。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、简述BFC规则及解决的问题？"><a href="#2、简述BFC规则及解决的问题？" class="headerlink" title="2、简述BFC规则及解决的问题？"></a>2、简述BFC规则及解决的问题？</h3><blockquote>
<p>规则：  </p>
<blockquote>
<ul>
<li>内部的标签会在垂直方向上一个接一个地放置。</li>
<li>垂直方向上的距离由margin决定，属于同一个BFC的两个相邻标签的margin会发生重叠。</li>
<li>每个标签的左外边距与包含块的左边相接触，即使浮动标签也是如此。</li>
<li>BFC的区域不会与float的标签域重叠。</li>
<li>计算BFC的高度时，浮动子标签也参与计算。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里的子标签不会影响到外面标签，反之亦然。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>解决的问题:</p>
<blockquote>
<ul>
<li>外边距塌陷（只有垂直方向会发生塌陷，水平方向不会。）<br>由于BFC是一个独立的容器里面的子标签不会影响外面的标签，外面的标签也不会影响BFC内的标签。所以兄弟盒子之间垂直外边距塌陷可以给其中一个盒子套一个父盒子，把父盒子设为BFC即可。父子垂直外边距塌陷，可以把父元素设置成BFC，父级成为了一个独立区域，子标签的边距就无法塌陷到外面。为了不影响布局一般用overflow:hidden;解决外边距塌陷的问题。</li>
<li>两栏或三栏布局（这里的情况是将左边盒子或左右两边的盒子写在前面，且必须将自适应的盒子写在后面，与圣杯、双飞翼布局不同。）</li>
</ul>
<blockquote>
<ul>
<li>将左边固定宽度的盒子左浮动，右边盒子设置overflow:hidden;即可将右边盒子设置成BFC，不会覆盖左边元素，并且右边盒子不设宽度就可以实现自适应两栏布局。</li>
<li>将左右两边固定宽度的盒子左右浮动，中间盒子不设置宽度且设置overflow:hidden;即可实现三栏自适应布局。 （中间栏写在最后的情况下，还可以中间栏不设宽度，且设置左右外边距等于左右两栏的宽度，由于左右两栏浮动不占位，中间栏可以与之同行，也实现了自适应三栏布局。） </li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<h3 id="3、文本溢出显示省略号如何实现？"><a href="#3、文本溢出显示省略号如何实现？" class="headerlink" title="3、文本溢出显示省略号如何实现？"></a>3、文本溢出显示省略号如何实现？</h3><blockquote>
<p>单行文本溢出</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*显示省略号*/</span>
<span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*文本不换行*/</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<blockquote>
<p>多行文本溢出</p>
<blockquote>
<ul>
<li>利用wenkit的css拓展属性（只有webkit内核才有用）</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
   <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将对象设置成弹性伸缩盒子模型显示*/</span>
   <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用来限制在一个块元素显示的文本的行数，这是一个不规范属性，它没有出现在css规范草案中。*/</span>
   <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置伸缩盒子对象的子元素的排列方式*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>利用伪元素模拟溢出显示省略号的效果（兼容性比较好）<br>实现步骤:将height设置为line-height的整数倍，防止超出的文字露出。给伪元素p::after添加渐变背景，避免文字之显示一半。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p<span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
<span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
<span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">'...'</span><span class="token punctuation">;</span>
<span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token property">padding-left</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-ms-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<h2 id="第八章-项目切图及规范"><a href="#第八章-项目切图及规范" class="headerlink" title="第八章 项目切图及规范"></a>第八章 项目切图及规范</h2><h3 id="1、为什么要初始化css样式？哪些样式需要初始化？"><a href="#1、为什么要初始化css样式？哪些样式需要初始化？" class="headerlink" title="1、为什么要初始化css样式？哪些样式需要初始化？"></a>1、为什么要初始化css样式？哪些样式需要初始化？</h3><blockquote>
<p>因为浏览器兼容问题，不同浏览器对某些标签默认的解析是不同的，如果没有对css初始化，往往会出现不同浏览器之间的页面显示差异，为了避免这种差异需要使用样式重置。<br>ul、li、dv等自带的边距，a链接的自带样式，列表自带的列表样式，em、i自带的斜体样式等。</p>
</blockquote>
<h3 id="2、display-none和visibility-hidden的区别？"><a href="#2、display-none和visibility-hidden的区别？" class="headerlink" title="2、display:none和visibility:hidden的区别？"></a>2、display:none和visibility:hidden的区别？</h3><blockquote>
<p>display:none是将元素的显示设为无，即在网页中看不见也不占位。visibility:hidden则是将元素隐藏不可见，但是元素本身宽高都存在并且占位。</p>
</blockquote>
<h3 id="3、你能想出几种方法让元素在页面中消失？"><a href="#3、你能想出几种方法让元素在页面中消失？" class="headerlink" title="3、你能想出几种方法让元素在页面中消失？"></a>3、你能想出几种方法让元素在页面中消失？</h3><blockquote>
<ul>
<li>display:none;</li>
<li>visibility:hidden;</li>
<li>position:absolute或fixed,用z-index覆盖，数值越小，越在后面，默认为0；</li>
<li>overflow:hidden;将要隐藏的元素移除父元素的范围。</li>
<li>opacity:0;将元素设置成透明。</li>
<li>将font-size,line-height,width,height设置为0;</li>
<li>transform:translate(-100%,-100%);</li>
<li>position: absolute;top: -9999px;left: -9999px;将元素移出可视区。</li>
</ul>
</blockquote>
<h3 id="4、标签应该如何合理嵌套？"><a href="#4、标签应该如何合理嵌套？" class="headerlink" title="4、标签应该如何合理嵌套？"></a>4、标签应该如何合理嵌套？</h3><blockquote>
<ul>
<li>行内标签里面不能放块级标签（a里面可以放块标签）。</li>
<li>块级标签里面可以放块级标签、行内标签、行内块标签（特殊：p、h1-h6里面不能再放块级）。</li>
<li>ul、ol和li事固定嵌套，ul、ol的直接子元素必须是li。dl和dt、dd是固定嵌套，tr和td、th是固定嵌套。</li>
<li>p标签不允许嵌套p标签，a标签不允许嵌套a标签和其他交互性元素如button。</li>
<li>尽可能地控制元素嵌套层级，不合理地嵌套会影响页面性能。</li>
</ul>
</blockquote>
<h3 id="5、简述网页中常见图片格式及特点？"><a href="#5、简述网页中常见图片格式及特点？" class="headerlink" title="5、简述网页中常见图片格式及特点？"></a>5、简述网页中常见图片格式及特点？</h3><table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
<th align="center">使用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jpg</td>
<td align="center">色彩丰富，文件小</td>
<td align="center">有损压缩，反复保存图片质量会明显下降</td>
<td align="center">色彩丰富地图片/渐变图像/照片</td>
</tr>
<tr>
<td align="center">gif</td>
<td align="center">文件小，支持动画，无兼容性问题</td>
<td align="center">只支持支持256种颜色</td>
<td align="center">色彩简单地logo/icon/动图</td>
</tr>
<tr>
<td align="center">png</td>
<td align="center">无损压缩、支持透明、简单图片尺寸小</td>
<td align="center">不支持动画，色彩丰富的图片尺寸大</td>
<td align="center">logo/icon/透明图</td>
</tr>
</tbody></table>
<h2 id="第九章-PC端项目-兼容问题"><a href="#第九章-PC端项目-兼容问题" class="headerlink" title="第九章 PC端项目-兼容问题"></a>第九章 PC端项目-兼容问题</h2><h3 id="1、说说你了解的浏览器兼容问题有哪些？"><a href="#1、说说你了解的浏览器兼容问题有哪些？" class="headerlink" title="1、说说你了解的浏览器兼容问题有哪些？"></a>1、说说你了解的浏览器兼容问题有哪些？</h3><blockquote>
<ul>
<li>图片间隙问题</li>
</ul>
<blockquote>
<ul>
<li>水平空白</li>
</ul>
<blockquote>
<ul>
<li>图片浮动</li>
<li>图片父元素设置font-size:0;</li>
</ul>
</blockquote>
<ul>
<li>垂直空白</li>
</ul>
<blockquote>
<ul>
<li>图片设置vertical-align:middle;</li>
<li>图片设置display:block;</li>
<li>图片父元素设置font-size:0;line-height:0;</li>
<li>图片浮动</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>ie中图片边框问题<br>ie中图片放在a标签中显示边框。解决方法：图片设置border:none;</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>ie8中背景复合属性写法问题<br>background:url(“images/bg.jpg”)no-repeat;在标准浏览器中均能正常显示背景图片，但是在ie中显示异常。解决方法：在url和no-repeat之间加上空格。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>其他ie低版本兼容性问题</li>
</ul>
<blockquote>
<ul>
<li>在ie6及更早版本浏览器中，定义小高度的容器。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#test</span></span><span class="token punctuation">{</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span>
<span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie6及更早版本浏览器下，浮动时产生双倍边距的bug。<br>解决方案:针对ie6设置该标签的display属性为inline即可。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#test</span></span><span class="token punctuation">{</span>
<span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>
<span class="token property">_display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及更早版本浏览器下，子标签相对定位时，父标签overflow属性的auto|hidden失效的问题。<br>解决方案：给父标签也设置相对定位position:relative;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及以下块转行内块不在一行显示的问题，解决方案如下:</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>
*<span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span>
*<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置或检索对象的缩放比例，1或100%时表示不缩放，更大更小表示放大缩小，不支持负数，兼容性不好。*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及以下浏览器中，当li中出现浮动子元素时，li之间产生的空白间隙。<br>解决方案：将垂直对齐方式vertical设置为top/middle/bottom。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、什么是CSSHack？"><a href="#2、什么是CSSHack？" class="headerlink" title="2、什么是CSSHack？"></a>2、什么是CSSHack？</h3><blockquote>
<p>由于不同厂商的浏览器或同一厂商不同版本的浏览器，对css的解析认识不完全一样，因此会导致生成的页面效果不一样，这时候就需要针对不同的浏览器去写不同的css，让它能同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果。</p>
</blockquote>
<h2 id="第十章-PC端项目-测试检查"><a href="#第十章-PC端项目-测试检查" class="headerlink" title="第十章 PC端项目-测试检查"></a>第十章 PC端项目-测试检查</h2><h3 id="1、在项目中你是如何做图片优化的？"><a href="#1、在项目中你是如何做图片优化的？" class="headerlink" title="1、在项目中你是如何做图片优化的？"></a>1、在项目中你是如何做图片优化的？</h3><blockquote>
<ul>
<li>使用base64编码代替图片。</li>
</ul>
<blockquote>
<p>Base64编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示时，可以用该字符串来代替图片的url属性。</p>
<p>优点：</p>
<blockquote>
<ul>
<li><p>减少HTTP网络请求。网页上的图片资源如果采用http形式的url的话都会额外发送一次请求，网页发送的http请求次数越多，会造成页面加载速度越慢。采用base64格式的编码，将图片转化为字符串后，图片文件会随着html元素一并加载。这样就可以减少http请求的次数，对于网页优化时一种较好的手段。</p>
</li>
<li><p>采用base64编码的图片是随着页面一起加载的，不会造成跨域请求的问题。</p>
</li>
<li><p>没有图片，更新要重新上传，不会造成清理图片缓存的问题。</p>
</li>
</ul>
</blockquote>
<p>缺点：</p>
<blockquote>
<ul>
<li>浏览器支持问题，IE6/IE7均不支持base64编码。</li>
<li>增加了css文件的尺寸。将图片转化为base64格式编码，生成的字符串往往会大于图片源文件的大小。如果将其写在一个css文件中，这样的一个css文件大小会剧增，造成代码不可读，还会造成请求传输的数据量增加。</li>
<li>造成数据库数据量巨大。将base64编码的图片存入数据库中会造成数据库数据量增大，这样的效果还不如将图片存至图片服务器而只在数据库中存入url字段。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>使用精灵图，减少页面请求次数。</li>
<li>在保证图片不失真的情况下合适地压缩图片。 <a href="https://tinify.cn/">https://tinify.cn/</a> </li>
<li>图片延迟加载(懒加载)：延迟加载图片或者符合某些条件时加载某些图片。</li>
<li>图片预加载：在网页全部加载之前，提前加载图片，当用户需要查看时直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。</li>
<li>使用css、svg、canvas、或iconfont代替图片。</li>
<li>根据不同的终端需求加载对应尺寸的图片。</li>
<li>根据图片特性和需求选择合适格式的图片。</li>
</ul>
</blockquote>
<h2 id="第十一章-HTML5基础"><a href="#第十一章-HTML5基础" class="headerlink" title="第十一章 HTML5基础"></a>第十一章 HTML5基础</h2><h3 id="1、HTML5有哪些新特性？"><a href="#1、HTML5有哪些新特性？" class="headerlink" title="1、HTML5有哪些新特性？"></a>1、HTML5有哪些新特性？</h3><blockquote>
<p>语义化标签、多媒体（音视频）、智能表单、canvas画布、web存储、地理定位…</p>
</blockquote>
<h3 id="2、如何处理HTML5新标签的浏览器兼容问题？"><a href="#2、如何处理HTML5新标签的浏览器兼容问题？" class="headerlink" title="2、如何处理HTML5新标签的浏览器兼容问题？"></a>2、如何处理HTML5新标签的浏览器兼容问题？</h3><blockquote>
<ul>
<li>通过js创建出新增的标签，再在css中将新增标签转为块级，才能使宽高生效。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>
header,footer</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;/style>
</code></pre>
</blockquote>
<blockquote>
<ul>
<li>使用封装好的插件html5shiv.js解决兼容性问题。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">[</span><span class="token keyword">if</span> lt ie <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"./js/html5shiv.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>endif<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">></span>
</code></pre>
</blockquote>
<h2 id="第十二章-CSS3基础"><a href="#第十二章-CSS3基础" class="headerlink" title="第十二章 CSS3基础"></a>第十二章 CSS3基础</h2><h3 id="1、css3有哪些新特性？"><a href="#1、css3有哪些新特性？" class="headerlink" title="1、css3有哪些新特性？"></a>1、css3有哪些新特性？</h3><blockquote>
<p>新增选择器、文本样式、边框属性（阴影、圆角）、多背景、变形、渐变、动画、过渡、多列布局、弹性盒布局、用户界面等等。</p>
</blockquote>
<h3 id="2、css3新增选择器有哪些？"><a href="#2、css3新增选择器有哪些？" class="headerlink" title="2、css3新增选择器有哪些？"></a>2、css3新增选择器有哪些？</h3><blockquote>
<p>属性选择器、结构伪类选择器、状态伪类选择器</p>
</blockquote>
<h2 id="第十三章-CSS3过渡、变换与动画"><a href="#第十三章-CSS3过渡、变换与动画" class="headerlink" title="第十三章 CSS3过渡、变换与动画"></a>第十三章 CSS3过渡、变换与动画</h2><h3 id="1、css3中过渡和动画的区别和各自的适用场景？"><a href="#1、css3中过渡和动画的区别和各自的适用场景？" class="headerlink" title="1、css3中过渡和动画的区别和各自的适用场景？"></a>1、css3中过渡和动画的区别和各自的适用场景？</h3><blockquote>
<ul>
<li>过渡</li>
</ul>
<blockquote>
<ul>
<li>不能自动运行，需要伪类或者js触发。</li>
<li>只有两种状态。</li>
<li>触发一次运行一次。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>动画</li>
</ul>
<blockquote>
<ul>
<li>可以自动运行。</li>
<li>可以定义多种状态。</li>
<li>可以多次或无限次运行。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>适用场景</li>
</ul>
<blockquote>
<ul>
<li>如果要灵活定制多个帧以及循环，用animation。</li>
<li>如果要简单的from to效果，用transition。</li>
<li>animation与js的交互不是很紧密，如果要使用js灵活设定动画属性，用transition。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="第十四章-弹性盒子和预处理"><a href="#第十四章-弹性盒子和预处理" class="headerlink" title="第十四章 弹性盒子和预处理"></a>第十四章 弹性盒子和预处理</h2><h3 id="1、解释一下CSS3的flexbox-弹性盒布局模型-以及适用场景？"><a href="#1、解释一下CSS3的flexbox-弹性盒布局模型-以及适用场景？" class="headerlink" title="1、解释一下CSS3的flexbox(弹性盒布局模型),以及适用场景？"></a>1、解释一下CSS3的flexbox(弹性盒布局模型),以及适用场景？</h3><blockquote>
<p>弹性盒模型布局是css3中的新的布局方式，把父元素设置成弹性盒容器，可以更加方便地去规定子元素地排列方式、对齐方式、剩余空间。对居中对齐，规则布局（如两栏、三栏布局）非常高效。</p>
</blockquote>
<h3 id="2、什么是less？less有什么好处？"><a href="#2、什么是less？less有什么好处？" class="headerlink" title="2、什么是less？less有什么好处？"></a>2、什么是less？less有什么好处？</h3><blockquote>
<p>定义：less是css的一种预处理语言，提供了一套新的语法，类似于编程语言，简化css代码，并且提供了一个编译器，用来把写好的less文件编译成css文件，在编译之后才能被浏览器识别使用。</p>
</blockquote>
<blockquote>
<p>优点：使css代码更简洁，适应性强，可读性好，有利于代码的维护。</p>
</blockquote>
<h2 id="第十五章-移动端项目-布局方案"><a href="#第十五章-移动端项目-布局方案" class="headerlink" title="第十五章 移动端项目-布局方案"></a>第十五章 移动端项目-布局方案</h2><h3 id="1、常见的移动端布局解决方案有哪些？原理如何？"><a href="#1、常见的移动端布局解决方案有哪些？原理如何？" class="headerlink" title="1、常见的移动端布局解决方案有哪些？原理如何？"></a>1、常见的移动端布局解决方案有哪些？原理如何？</h3><blockquote>
<p>rem布局</p>
<blockquote>
<p>rem是指相对于根元素的字体大小的单位。  </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>原理：利用rem作为布局单位，不同设备访问页面时，通过js脚本动态计算出一个最新的font-size值设置给html标签，从而达到界面整体缩放效果。</p>
</blockquote>
</blockquote>
<blockquote>
<p>vw+rem布局</p>
<blockquote>
<p>vw是一个相对视口宽度的一个单位，视口被分为100vw。 </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>假设750px的设备中，font-size=100px，则设置html{font-size：13.33333vm;}，然后可以直接以rem为单位布局，不需借助插件。</p>
</blockquote>
</blockquote>
<h2 id="第十六章-移动端项目-拓展知识"><a href="#第十六章-移动端项目-拓展知识" class="headerlink" title="第十六章 移动端项目-拓展知识"></a>第十六章 移动端项目-拓展知识</h2><h3 id="1、如何处理小于12px的字体？"><a href="#1、如何处理小于12px的字体？" class="headerlink" title="1、如何处理小于12px的字体？"></a>1、如何处理小于12px的字体？</h3><blockquote>
<p>将容器元素转成块级或者行内块，利用-webkit-transform:scale()属性将容器缩小，再用-webkit-transform-orign-X:left center;将变形原点靠右居中，可以使字体左对齐并居中。</p>
</blockquote>
<h2 id="第十八章-响应式布局"><a href="#第十八章-响应式布局" class="headerlink" title="第十八章 响应式布局"></a>第十八章 响应式布局</h2><h3 id="1、什么是响应式？"><a href="#1、什么是响应式？" class="headerlink" title="1、什么是响应式？"></a>1、什么是响应式？</h3><blockquote>
<p>响应式布局是在不同的设备上网页可以呈现不同的布局。一套代码可以兼容pc端、移动端。(不适应复杂网站，适合一些简单的展示网站，如企业官网、后台管理系统。)</p>
</blockquote>
<h3 id="2、响应式项目中常用到哪些核心技术？"><a href="#2、响应式项目中常用到哪些核心技术？" class="headerlink" title="2、响应式项目中常用到哪些核心技术？"></a>2、响应式项目中常用到哪些核心技术？</h3><blockquote>
<p>媒体查询</p>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
···
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>百分比布局</p>
<blockquote>
<p>宽度不固定，可以使用百分比，内外边距也可以使用百分比。</p>
</blockquote>
</blockquote>
<blockquote>
<p>弹性盒布局</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">container</span><span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>
<span class="token property">flex-direction</span><span class="token punctuation">:</span>row/row-reverse/column/colunm-reverse<span class="token punctuation">;</span>
<span class="token property">justify-content</span><span class="token punctuation">:</span>flex-start/flex-end/center/space-between/space-around/space-enenly<span class="token punctuation">;</span>
<span class="token property">align-items</span><span class="token punctuation">:</span>stretch/flex-start/flex-end/center/baseline<span class="token punctuation">;</span>
<span class="token property">flex-wrap</span><span class="token punctuation">:</span>nowrap/wrap/wrap-reverse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*wrap-reverse表示主轴方向向下的情况下，换行且第一行在下方*/</span>
<span class="token property">align-content</span><span class="token punctuation">:</span>stretch/flex-start/flex-end/center/space-around/space-between/space-evenly<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*表示多行项目在交叉轴上的对齐，可参考justify-content*/</span>
<span class="token punctuation">}</span>
<span class="token selector">items</span><span class="token punctuation">{</span>
<span class="token property">order</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目的排列顺序，数值越小，排列越靠前，默认为0*/</span>
<span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目的放大比例，默认为0，即如果存在剩余空间也不放大。*/</span>
<span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目缩小比例，默认为1，即如果空间不足，该项目将缩小。*/</span>
<span class="token property">align-self</span><span class="token punctuation">:</span>auto/stretch/center/flex-start/flex-end/baseline/inherit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义该子项目单独在交叉轴上的对齐方式，与align-items属性作用相同，但该属性用于项目。*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>响应式图片</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">{</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*保证图片保持原始的宽高比。*/</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*为了防止图片宽度过大而使图片失真，需要用max-width属性设置图片最大宽度不超过图片原始宽度。*/</span>
<span class="token selector">img</span><span class="token punctuation">{</span>
<span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>响应式字体</p>
<blockquote>
<p>通过rem/vw布局搭配媒体查询实现响应式字体。</p>
</blockquote>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法一</title>
    <url>/posts/cc78.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第一章-ES6语法-一"><a href="#第一章-ES6语法-一" class="headerlink" title="第一章 ES6语法 一"></a>第一章 ES6语法 一</h2><h3 id="ES5回顾"><a href="#ES5回顾" class="headerlink" title="ES5回顾"></a>ES5回顾</h3><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>定义：严格模式是指在严格的条件下运行js代码，在ECMAScript5引入，通过在脚本或函数的头部添加“use strict”来声明。    </p>
<p>好处：</p>
<ul>
<li><p>消除语法的不合理、不严谨之处，保证代码的运行安全。</p>
</li>
<li><p>提高编译器效率，增加运行速度。</p>
</li>
<li><p>为未来新版本的js做铺垫。  </p>
</li>
</ul>
<p>限制：</p>
<ul>
<li><p>不允许使用未声明的变量。</p>
</li>
<li><p>不允许对变量或函数使用delete操作符。</p>
</li>
<li><p>不允许重命名变量。</p>
</li>
<li><p>不允许使用八进制。</p>
</li>
<li><p>抛弃with语句。</p>
</li>
<li><p>不可对只读对象赋值，不可对不可配置对象使用delete操作符。</p>
</li>
<li><p>禁止this关键字指向全局对象。</p>
</li>
<li><p>不可再if内部声明函数。</p>
</li>
<li><p>不允许使用转义字符。</p>
</li>
<li><p>不允许对一个使用getter方法读取的属性进行赋值。</p>
</li>
<li><p>不允许删除一个不允许删除的属性。</p>
</li>
<li><p>变量不能使用“eval、arguments”字符串。</p>
</li>
<li><p>在作用域eval()创建的变量不能被调用。</p>
</li>
</ul>
<h4 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h4><p>JSON是一种按照JavaScript对象语法的数据格式，虽然是基于JavaScript语法，但它独立于JavaScript，这也是为什么许多程序环境能够读取和生成JSON。JSON是一个序列化的对象或者数组，它的本质是字符串。</p>
<p>JSON对象有两个方法，并且JSON通常用于服务端交换数据，分别为JSON.parse()（将JSON转为js可用数据格式）和JSON.stringify()（将js数据格式转为JSON）。</p>
<h4 id="Object拓展"><a href="#Object拓展" class="headerlink" title="Object拓展"></a>Object拓展</h4><p>ES5给Object拓展了一些静态方法，常用的有：</p>
<ul>
<li><p>Object.create(prototype[,descriptors])</p>
<p>作用：以指定对象为原型创建新的对象，为新的对象指定新的属性，并对属性进行描述。新增的属性不会加到原型上。</p>
<ul>
<li>value：指定值</li>
<li>writable：标识当前属性是否可修改，默认为false。</li>
<li>configurable：标识当前属性值是否可以被删除，默认为false。</li>
<li>enumenerable：标识当前属性是否能用for…in枚举，默认为false。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token punctuation">{</span>
    sex<span class="token punctuation">:</span><span class="token punctuation">{</span>
        value<span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>
        writable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ sex: 'man', name: 'lisi' }</span></code></pre>
</li>
<li><p>Object.defineProperties(object,descriptors)</p>
<p>作用：为指定对象定义拓展多个属性。</p>
<ul>
<li>get：来获取当前属性值触发的回调函数。</li>
<li>set：修改当前属性值触发的回调函数，参数为修改后的值。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    firstName <span class="token punctuation">:</span> <span class="token string">'Marry'</span><span class="token punctuation">,</span>
    lastName <span class="token punctuation">:</span> <span class="token string">'LuCi'</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">{</span>
    fullName<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在外部设置此属性的时候，会调用一次set方法</span>
            <span class="token keyword">var</span> names <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Marry LuCi</span>
person<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'L Jams'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ firstName: 'L', lastName: 'Jams' }</span></code></pre>
</li>
</ul>
<h4 id="Array数组拓展"><a href="#Array数组拓展" class="headerlink" title="Array数组拓展"></a>Array数组拓展</h4><p>数组的拓展主要体现在一些原型方法上，需要合理使用，后续框架中也会经常使用。</p>
<ul>
<li><p>Array.prototype.forEach(function(item,index){})</p>
<p>遍历数组</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//5 0</span>
<span class="token comment" spellcheck="true">//4 1</span>
<span class="token comment" spellcheck="true">//3 2</span>
<span class="token comment" spellcheck="true">//2 3</span>
<span class="token comment" spellcheck="true">//1 4</span></code></pre>
</li>
<li><p>Array.prototype.map(function(item,index){})</p>
<p>遍历数组，返回一个新数组，返回加工之后的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 11, 12, 13, 14 ]</span></code></pre>
</li>
<li><p>Array.prototype.filter(function(item,index){})</p>
<p>遍历过滤出一个新的子数组，返回条件为true的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 1, 2 ]</span></code></pre>
</li>
</ul>
<h4 id="Function拓展"><a href="#Function拓展" class="headerlink" title="Function拓展"></a>Function拓展</h4><ul>
<li><p>Function.prototype.bind(obj)</p>
</li>
<li><p>Function.prototype.call(obj)</p>
</li>
<li><p>Function.prototype.apply(obj)</p>
<p>改变this指向，将函数内this绑定为obj，并将函数返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>
    age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>
    objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>
    objFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fm<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token string">'来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">"去往"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">99</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都, 上海去往undefined</span>

<span class="token comment" spellcheck="true">/*从上面四个结果不难看出:

bind 返回的是一个新的函数，方法后面多了个 () ，必须调用它才会被执行。

call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：

call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。

apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。

bind 除了返回是函数以外，它的参数和 call 一样。

当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！*/</span></code></pre>
</li>
</ul>
<h3 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h3><p>ECMAScript6.0（j简称ES6）是JavaScript语言的下一代标准，在2015年6月正式发布。它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>新的变量声明方式，与var相似。</p>
<ul>
<li><p>不能变量提升</p>
</li>
<li><p>形成一个<strong>暂时性死区</strong></p>
<p>在同一个作用域内，用let声明某一个变量，那么在此声明之前的区域，称之为该变量的暂时性死区。根本原因是，let和const必须，先声明，后使用，不存在变量提升。</p>
<p>ES6明确规定，如果在区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域，凡是在声明之前就使用这些变量，就会报错。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    temp <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//该代码在temp = 2;处会报错。</span>
<span class="token comment" spellcheck="true">//因为在{}内，temp = 2下面还有一个let temp声明，temp在{}内形成了暂时性死区，所以上面的temp = 2无效，但如果没有这个声明，temp在{}是可以被访问的，因为{}内与外层还是父子作用域的关系，这个要分清楚。</span></code></pre>
</li>
<li><p>基于暂时性死区的性质，同一个块级作用域内不能重复声明，且同一个作用域内let和var不能声明同一个变量。</p>
</li>
</ul>
<p>for循环中很适合用let</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//55555</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//01234</span></code></pre>
<p>var 声明的变量是一个全局变量，在全局范围内有效，全局只存在一个变量，每次循环都会覆盖。由于for循环瞬间完成的特性，定时器是在循环完成之后执行所以i都是5。</p>
<p>let声明的i，只在当前轮循环有效，每次都是新的变量，所以定时器里的i每次都是不同的变量。（JavaScript引擎内部会记录每次变量的值。）</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>块级作用域中的块，就是语句块，表现形式为{}，大括号包裹的内容为语句块。</p>
<ul>
<li><p>只对let声明的变量才会有块级作用域。</p>
</li>
<li><p>if-else会形成块级作用域。</p>
</li>
<li><p>for循环小括号()内跟循环体{}是一种父子作用域的关系。</p>
</li>
<li><p>如果使用let与const，每次迭代将会创建一个新的存储空间，这可以保证作用域在迭代的内部。</p>
</li>
<li><p>块级作用域允许任意嵌套，外层作用域无法读取内层作用域的变量，内外层作用域可以声明同名变量。</p>
</li>
</ul>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><ul>
<li>常量声明关键字：const</li>
<li>不能变量提升</li>
<li>不能重复声明/赋值（如果是对象，可以修改对象中属性的值。）</li>
<li>具有暂时性死区特点</li>
<li>块级作用域</li>
<li>常量特有的特点<ul>
<li>只能赋值一次，不能重复赋值。</li>
<li>声明时候立马赋值。</li>
</ul>
</li>
</ul>
<p>补充：const如何做到在变量声明之后不允许改变的？其实const保证的不是变量的值不变，而是保证了变量指向的内存地址所保存的数据不允许改动。由于简单数据类型和复杂数据类型的保存值的方式不一样，简单数据类型的值保存在变量指向的内存地址，因此const声明简单数据类型变量等同于常量。而复杂数据类型，变量指向的内存地址其实是保存了一个指向实际数据的指针，所以const只能保存指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用const声明复杂数据类型时要慎重。</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值是对赋值运算符的拓展，针对数组或对象进行模式匹配。用于多个变量从同一个复杂数据源获取值。</p>
<h4 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h4><p>参考数组的模式一一赋值。在数组的解构中，解构目标若为可遍历对象，皆可进行解构赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 2</span>
<span class="token comment" spellcheck="true">//可省略</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 2,b = 3</span>
<span class="token comment" spellcheck="true">//不完全解构</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = undefined</span>
<span class="token comment" spellcheck="true">//可嵌套</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 2,c = 3</span></code></pre>
<p>匹配失败时，计算就为默认值，默认值可以是具体值或表达式。匹配成功就是匹配成功的值，匹配失败才会是默认值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a = 0,b = 2</span></code></pre>
<h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><p>数组的按顺序排列，变量的值由位置决定，而对象的属性没有次序，必须与属性名相同才能取到值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">,</span> b<span class="token punctuation">:</span>b1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2</span>
<span class="token comment" spellcheck="true">//顺序无关</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span>b1 <span class="token punctuation">,</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2</span>
<span class="token comment" spellcheck="true">//属性值需相同</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span>a1<span class="token punctuation">,</span>d<span class="token punctuation">:</span>b1 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//undefined,undefined</span>
<span class="token comment" spellcheck="true">//可以有默认值</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">,</span>b<span class="token punctuation">:</span>b1<span class="token punctuation">,</span>c<span class="token punctuation">:</span>c1<span class="token operator">=</span><span class="token string">'beijing'</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2,c1 = 'beijing'</span></code></pre>
<p>当变量和属性名一致时，可以简写（省略属性名和：），一般也是用简写。对象解构赋值的内部机制是先找到同名属性，然后再赋值给对应的变量，真正被赋值的是变量，而不是属性名。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a = 1,b = 2</span></code></pre>
<p>所以有时候需要分清到底哪些是模式（属性名）哪些是变量，例如</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    s1<span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token string">'zs'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>s1<span class="token punctuation">:</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//name = 'zs',age = 18</span>
<span class="token comment" spellcheck="true">//这里的s1是模式而不是变量，不会被赋值</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    s1<span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token string">'zs'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>s1<span class="token punctuation">,</span>s1<span class="token punctuation">:</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//s1 = [ 'zs', { age: 18 } ],name = 'zs',age = 18</span>
<span class="token comment" spellcheck="true">//这里的s1就是与属性名同名的变量</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    man<span class="token punctuation">:</span><span class="token punctuation">{</span>
        student<span class="token punctuation">:</span><span class="token punctuation">{</span>
            name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>
            age<span class="token punctuation">:</span><span class="token number">18</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>man<span class="token punctuation">,</span>man<span class="token punctuation">:</span><span class="token punctuation">{</span>student<span class="token punctuation">}</span><span class="token punctuation">,</span>man<span class="token punctuation">:</span><span class="token punctuation">{</span>student<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span>student<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//man = { student: { name: 'zs', age: 18 } }</span>
<span class="token comment" spellcheck="true">//student = { name: 'zs', age: 18 } </span>
<span class="token comment" spellcheck="true">//name = zs,age = 18</span></code></pre>
<p>解构赋值可以解析到子对象从父对象继承来的属性，如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//18</span>
<span class="token comment" spellcheck="true">//Object.setPrototypeOf()方法设置一个指定的对象的原型（一般不建议使用）</span>
<span class="token comment" spellcheck="true">//obj1的原型对象是obj2，age属性不是obj1自身的属性，而是继承自obj2的属性，解构赋值可以取到这个值。</span></code></pre>
<p>注意：如果要将一个已经声明的变量用于解构赋值，需要非常小心。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">;</span>
<span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'zs'</span> <span class="token punctuation">}</span></code></pre>
<p>以上写法不合理，因为JavaScript引擎会将{ name }解释成代码块，从而发生语法错误，可以写成如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//圆括号虽然在此处有助于解析，但是也有许多情况滥用圆括号导致歧义，ES6的规则是，只要有可能导致歧义，就不得使用圆括号。</span></code></pre>
<p>解构赋值允许等号左边的模式不放任何变量名，虽然没有意义但是语法合法。</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">:</span> a<span class="token punctuation">,</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token function">console</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1,3</span></code></pre>
<p>对数组进行对象解构，键名分别是0，1，2，方括号的写法属于“属性名表达式”，深究另行查找。</p>
<h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><p>字符串可以进行解构赋值，这时字符串被转换成一个类似数组的对象，类似数组的对象都有一个length属性，也可以进行解构赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>length <span class="token punctuation">:</span> len<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">'hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//a = 'h'</span>
<span class="token comment" spellcheck="true">//b = 'e'</span>
<span class="token comment" spellcheck="true">//c = 'l'</span>
<span class="token comment" spellcheck="true">//d = 'l'</span>
<span class="token comment" spellcheck="true">//e = 'o'</span>
<span class="token comment" spellcheck="true">//len = 5</span></code></pre>
<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><p>数值和布尔值进行解构赋值时，会先转成对象，数值和布尔值包装成对象都有toString属性。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>toString <span class="token punctuation">:</span> a<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>toString <span class="token punctuation">:</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">===</span> Boolean<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<h3 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>模板字符串是增强版的字符串，用反引号(``)标识，除了作为普通字符串，还可以用来定义多行字符串，通过${}在字符串中加入变量和表达式。中间可以使用转义字符，模板字符串中的换行和空格都是会被保留的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`he</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">llo\nworld`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//he123llo</span>
<span class="token comment" spellcheck="true">//world</span></code></pre>
<h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><p>标签模板是函数调用的一种特殊形式，调用的参数是模板字符串。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span>log<span class="token template-string"><span class="token string">`hi`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'hi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'hi' ]</span></code></pre>
<p>如果模板字符串里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数再调用函数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
fun<span class="token template-string"><span class="token string">`a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">c`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Arguments] { '0': [ 'a', 'c' ], '1': 'b' }</span>
<span class="token comment" spellcheck="true">//等同于</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Arguments] { '0': [ 'a', 'c' ], '1': 'b' }</span></code></pre>
<h3 id="函数拓展"><a href="#函数拓展" class="headerlink" title="函数拓展"></a>函数拓展</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><ul>
<li><p>在es6之前，不能直接为函数参数指定默认值，es6中允许为函数的参数传递默认值，在未传递参数或者参数未undefined时，才会使用默认参数，需要注意，null值是被认为有效的值传递。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//es6之前</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//es6</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li><p>函数使用默认参数时，该函数不允许有与默认参数同名的参数。</p>
</li>
<li><p>函数参数默认值存在暂时性死区，在函数参数默认值表达式中，还未初始化的参数值无法作为其他参数的默认值。</p>
</li>
</ul>
<p>函数默认值与解构赋值结合使用</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined 5</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//TypeError   没有实参会报错</span>

<span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined 5</span></code></pre>
<p>函数参数设置默认值之后，具有以下特点：</p>
<ul>
<li><p><strong>函数的length属性</strong></p>
<p>函数的length属性返回该函数预期传入的参数个数，不包括设置默认值的参数，某个参数指定默认值后，预期传入的参数就不包括这个参数了。</p>
</li>
<li><p><strong>默认值参数形成单独作用域。</strong></p>
<p>函数参数设置了默认值之后，函数进行声明初始化时，参数会形成一个单独的作用域，等到初始化结束，这个作用域就会消失。这种语法在不设置参数默认值时，是不会出现的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>y <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
<span class="token comment" spellcheck="true">//参数y的默认值等于变量x，函数调用时，参数形成一个单独的作用域，在这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x，函数调用时，函数体内部的局部变量x不影响默认值变量。</span></code></pre>
</li>
</ul>
<p>参数默认值应用：</p>
<p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Missing parameter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>mustBeProvided <span class="token operator">=</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Error:Minssing parameter</span>
<span class="token comment" spellcheck="true">//当参数没有赋值时，默认参数是一个函数调用，该函数被执行抛出错误。</span></code></pre>
<h4 id="不定参数-rest参数"><a href="#不定参数-rest参数" class="headerlink" title="不定参数/rest参数"></a>不定参数/rest参数</h4><p>不定参数用来表示不确定参数，由…加上一个具名参数标识符组成，<strong>只能放在参数组的最后，且只有一个</strong>。</p>
<p>rest参数在一定程度上代替了arguments，他们的区别是，<strong>argumens对象不是数组，而是一个类似数组的对象</strong>，所以它要使用数组的方法，必须使用Array.prototype.silce.call将其转为数组。rest参数是一个真正的数组，数组特有的方法他都可以使用。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//15</span></code></pre>
<p><strong>箭头函数中没有arguments。</strong></p>
<p><strong>函数的length属性不包含rest参数。</strong></p>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>基本语法：参数 =&gt; 函数体</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//等价于</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><p>当箭头函数没有参数或者有多个参数的时候，要用（）括起来。</p>
</li>
<li><p>当箭头函数有多行语句，函数体要用{}包裹起来表示代码块，当只有一行语句，并且需要返回值时，可以省略{}，结果会自动返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
</li>
<li><p>当箭头函数要返回对象的时候，为了区分代码块，要用（）将对象包裹起来，否则会报错。</p>
</li>
<li><p>箭头函数中没有this、super、arguments和new.target绑定。</p>
</li>
<li><p>箭头函数不改变this指向，箭头函数中的this与父级this指向一样。</p>
</li>
</ul>
<h3 id="数组拓展"><a href="#数组拓展" class="headerlink" title="数组拓展"></a>数组拓展</h3><h4 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h4><p>在数组中…是拓展运算符，它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span></code></pre>
<p>拓展运算符与正常的函数参数结合使用，位置不固定。拓展运算符后面还可以放置表达式，如果拓展运算符后面是一个空数组，则不产生任何效果。只有函数调用时，拓展运算符才能放在圆括号中，否则会报错。</p>
<h4 id="拓展运算符的应用"><a href="#拓展运算符的应用" class="headerlink" title="拓展运算符的应用"></a>拓展运算符的应用</h4><ul>
<li><h5 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//方法一</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>
<span class="token comment" spellcheck="true">//方法二</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre>
<p>…拓展运算符复制一维数组属于深拷贝，但是它只实现一层拷贝，不能实现多层深拷贝。如果是多维数组，里面的嵌套数组依然是指针指向。下面的合并数组也是如此。</p>
</li>
<li><h5 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h5><p>拓展运算符提供了数组合并的新写法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

arr3<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6]</span>

arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6]</span></code></pre>
</li>
<li><h5 id="与解构赋值结合"><a href="#与解构赋值结合" class="headerlink" title="与解构赋值结合"></a>与解构赋值结合</h5><p>拓展运算符与解构赋值结合起来，用于生成数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1  [2,3,4,5]</span></code></pre>
<p>如果将拓展运算符用于数组赋值，则只能放在参数的最后一位，否则会报错。</p>
</li>
<li><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>拓展运算符还可以将字符串转为真正的数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'h', 'e', 'l', 'l', 'o' ]</span></code></pre>
<p>上面的写法有一个重要的好处，能够正确识别四个字节的Unicode字符。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a\uD83D\uDE80b'</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'a\uD83D\uDE80b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<p>凡是涉及到操作四个字节的Unicode字符的函数，都有这个问题，因此最好都用拓展运算符改写。</p>
</li>
<li><h5 id="实现了Iterator接口的数据类型转为真正数组"><a href="#实现了Iterator接口的数据类型转为真正数组" class="headerlink" title="实现了Iterator接口的数据类型转为真正数组"></a>实现了Iterator接口的数据类型转为真正数组</h5><p>所有实现了Iterator接口的数据类型都可以采用拓展运算符将其转为真正的数组，比如map数据。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre>
</li>
</ul>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法二</title>
    <url>/posts/a979.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第二章-ES6语法二"><a href="#第二章-ES6语法二" class="headerlink" title="第二章 ES6语法二"></a>第二章 ES6语法二</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<h4 id="Set和Map中的特殊值"><a href="#Set和Map中的特殊值" class="headerlink" title="Set和Map中的特殊值"></a>Set和Map中的特殊值</h4><p>Set对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>
<ul>
<li>+0与-0在存储判断唯一性的时候是恒等的，所以不会同时存在。</li>
<li>undefined与undefined是恒等的，所以不会同时存在。</li>
<li>NaN与NaN是不恒等的，但是在Set中只能存在一个，不会同时存在。</li>
</ul>
<h4 id="Set类型转换"><a href="#Set类型转换" class="headerlink" title="Set类型转换"></a>Set类型转换</h4><ul>
<li><h5 id="Array转Set"><a href="#Array转Set" class="headerlink" title="Array转Set"></a>Array转Set</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 'a', {}, [ 2, 3 ] }</span></code></pre>
</li>
<li><h5 id="Set转Array"><a href="#Set转Array" class="headerlink" title="Set转Array"></a>Set转Array</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 1, 'a', {}, [ 2, 3 ] ]</span></code></pre>
</li>
<li><h5 id="String转Set"><a href="#String转Set" class="headerlink" title="String转Set"></a>String转Set</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 'h', 'e', 'l', 'o' }</span></code></pre>
</li>
</ul>
<h4 id="Set实例的属性"><a href="#Set实例的属性" class="headerlink" title="Set实例的属性"></a>Set实例的属性</h4><ul>
<li>Set.prototype.constructor：构造函数。默认是Set函数。</li>
<li>Set.prototype.size：返回Set实例的总成员数。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Function: Set]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span></code></pre>
<h4 id="Set实例的方法"><a href="#Set实例的方法" class="headerlink" title="Set实例的方法"></a>Set实例的方法</h4><p>Set实例的方法分为两大类：操作方法（操作数据）和遍历方法（遍历成员）</p>
<h5 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h5><ul>
<li>Set.prototype.add(value)：添加某个值，返回原Set本身。</li>
<li>Set.prototype.delete(value)：删除某个元素，返回一个布尔值，表示是否删除成功。</li>
<li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>
<li>Set.prototype.clear()：清除所有成员，没有返回值。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 2, 'a', 'b', 'c' }</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set {}</span></code></pre>
<h5 id="遍历方法："><a href="#遍历方法：" class="headerlink" title="遍历方法："></a>遍历方法：</h5><ul>
<li>Set.prototype.keys()：返回键名的遍历器。</li>
<li>Set.prototype.values()：返回值的遍历器。</li>
<li>Set.prototype.entries()：返回键值对的遍历器，同时包括键名和键值。</li>
<li>Set.prototype.forEach()：使用回调函数遍历每个成员。</li>
</ul>
<p>由于Set结构没有键名只有键值（或者说键名键值是同一个值），所以keys方法和values方法的行为完全一致。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Iterator] { 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Iterator] { 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Entries] { [ 'a', 'a' ], [ 'b', 'b' ], [ 'c', 'c' ] }</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//[ 'a', 'a' ]</span>
<span class="token comment" spellcheck="true">//[ 'b', 'b' ]</span>
<span class="token comment" spellcheck="true">//[ 'c', 'c' ]</span></code></pre>
<p>Set结构的实例默认可以遍历，它的默认遍历器生成函数就是它的values()方法。这意味着可以省略values方法，<strong>直接用for…of循环遍历Set</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span></code></pre>
<p>Set与数组一样，也可以使用forEach方法进行遍历，但与数组不同的是，Set没有索引值，所以它的第一第二两个参数的值相同。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//4 4</span>
<span class="token comment" spellcheck="true">//3 3</span>
<span class="token comment" spellcheck="true">//2 2</span>
<span class="token comment" spellcheck="true">//1 1</span></code></pre>
<h4 id="Set对象作用"><a href="#Set对象作用" class="headerlink" title="Set对象作用"></a>Set对象作用</h4><ul>
<li><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>
</code></pre>
</li>
<li><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> nuion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>union<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 3, 4 }</span>
</code></pre>
</li>
<li><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1 }</span>
</code></pre>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>JavaScript对象本质上是键值对的集合（Hash结构），但是传统上只能用作字符串当作键，限制太大。</p>
<p>为了解决这个问题，ES6提供了Map数据结构，类似于对象，也是键值对的集合，但是“”键</p>
<p>的范围不限于字符串，各种类型的值都可以当作键，是一种更完善的Hash结构实现。</p>
<p>Map中的键也有特殊值，与Set一样，-0与+0、undefined、NaN。</p>
<h4 id="Map和Object的区别"><a href="#Map和Object的区别" class="headerlink" title="Map和Object的区别"></a>Map和Object的区别</h4><ul>
<li>一个Object的键只能时字符串或者Symbol，但是一个Map的键可以是任意值。</li>
<li>Map中的键值是有序的（FIFO原则），而添加到对象中的键则不是。</li>
<li>Map的键值对个数可以从size属性获取，而Object的键值对个数只能手动计算。</li>
<li>Object都有自己的原型，原型链上的键名有可能和对象上的设置的键名产生冲突。</li>
</ul>
<h4 id="Map属性和方法"><a href="#Map属性和方法" class="headerlink" title="Map属性和方法"></a>Map属性和方法</h4><ul>
<li><p>size属性</p>
<p>该属性返回Map结构的成员总数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>
</code></pre>
</li>
<li><p>Map.prototype.set(key,value)</p>
<p>set()方法设置/修改键值对成员并返回整个Map结构。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<p>set()返回的是当前Map对象，因此可以采用链式写法。</p>
</li>
<li><p>Map.prototype.get(key)</p>
<p>get()方法读取key对应的键值，如果找不到key就返回undefined。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//zs</span>
</code></pre>
</li>
<li><p>Map.prototype.has(key)</p>
<p>has()方法返回一个布尔值，表示某个键是否在当前Map对象中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
</li>
<li><p>Map.prototype.delete(key)</p>
<p>delete()方法删除某个键，返回true，如果删除失败，返回false。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs' }</span>
map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map {}</span>
</code></pre>
</li>
<li><p>Map.prototype.clear()</p>
<p>clear()方法清除所有成员，没有返回值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>
</code></pre>
</li>
</ul>
<h4 id="Map遍历方法"><a href="#Map遍历方法" class="headerlink" title="Map遍历方法"></a>Map遍历方法</h4><ul>
<li>Map.prototype.key()：返回键名的遍历器</li>
<li>Map.prototype.values()：返回键值的遍历器</li>
<li>Map.prototype.entries()：返回所有成员的遍历器</li>
<li>Map.prototype.forEach()：遍历Map的所有成员</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//name age</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//zs 18</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//['name','zs']</span>
<span class="token comment" spellcheck="true">//['age',18]</span>
</code></pre>
<p>Map的forEach()方法与数组和Set的forEach()方法类似，实现遍历如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//zs name</span>
<span class="token comment" spellcheck="true">//18 age</span>
</code></pre>
<h4 id="Map与其他数据结构的相互转换"><a href="#Map与其他数据结构的相互转换" class="headerlink" title="Map与其他数据结构的相互转换"></a>Map与其他数据结构的相互转换</h4><h5 id="Map转为数组"><a href="#Map转为数组" class="headerlink" title="Map转为数组"></a>Map转为数组</h5><p>Map转为数组最方便的方法就是使用拓展运算符（…）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ [ 'name', 'zs' ], [ 'age', 18 ] ]</span>
</code></pre>
<h5 id="数组转为Map"><a href="#数组转为Map" class="headerlink" title="数组转为Map"></a>数组转为Map</h5><p>将数组以参数传入Map构造函数，就可以将数组转为Map。注意：这里的数组也必须是类似键值对形式，否则键值为undefined。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18, 'abc' => undefined }</span>
</code></pre>
<h5 id="Map转为对象"><a href="#Map转为对象" class="headerlink" title="Map转为对象"></a>Map转为对象</h5><p>如果所有Map的键都是字符串，它可以无损地转为对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ name: 'zs', age: 18 }</span>
</code></pre>
<p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p>
<h5 id="对象转为Map"><a href="#对象转为Map" class="headerlink" title="对象转为Map"></a>对象转为Map</h5><p>对象转为Map可以通过Object.entries()。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'a' => 1, 'b' => 2 }</span>
</code></pre>
<p>也可以通过函数转换：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<h5 id="Map转为JSON"><a href="#Map转为JSON" class="headerlink" title="Map转为JSON"></a>Map转为JSON</h5><p>Map转为JSON要区分两种情况，一种情况是Map的键名都是字符串，这时可以选择转为对象JSON。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mapToStrJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToStrJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[["name","zs"],[{"age":18},["abc"]]]</span>
</code></pre>
<p>另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[["name","zs"],["age",18]]</span>
</code></pre>
<h5 id="JSON转为Map"><a href="#JSON转为Map" class="headerlink" title="JSON转为Map"></a>JSON转为Map</h5><p>这也分两种情况，键名都是字符串。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">jsonToStrMap</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token string">'{"name":"zs","age":18}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<p>另一种情况，整个JSON就是一个数组，且每个数组成员本身又是一个有两个成员的数组，这时，它可以一一对应地转为Map，这往往是Map转为数组JSON的逆操作。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">jsonToMap</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token string">'[["abc",123],[{"name":"zs"},["beijing"]]]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Map { 'abc' => 123, { name: 'zs' } => [ 'beijing' ] }</span>
</code></pre>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法是用来定义属性的唯一属性名。</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>Symbol函数栈不能使用new命令，因为Symbol是原始数据类型，不是对象，可以接受一个字符串作为参数，为新创建的Symbol提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分。</p>
<p>Symbol函数的参数只是表示对当前Symbol值的描述，因此相同的参数Symbol函数返回值是不相等的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Symbol(name)</span>

<span class="token keyword">let</span> s1<span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//相同的参数，返回值不相等。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<p><strong>作为属性名使用，可以保证属性不重名。</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">'zs'</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ [Symbol(name)]: 'zs' }</span>
</code></pre>
<p>Symbol作为对象属性名时不能用.运算符，要用方括号，因为**.运算符后面是字符串**，所以取到的是字符串s属性，而不是Symbol值s属性。</p>
<p>因为点运算符后面总是字符串，所以当以点运算符的方式将Symbol值作为对象的属性名时，以[]使用该属性需要加上引号，如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ s: abc}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abc</span>
</code></pre>
<p>注意：Symbol值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问，但是不会出现在for…in，for…of的循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回。如果读取到一个对象的Symbol属性，可以通过Object.getOwnPropertySymbols()和Reflect.ownKeys()取到。</p>
<blockquote>
<ul>
<li>Object.keys()方法返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</li>
<li>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</li>
<li>Object.getOwnPropertySymbols()方法返回一个给定对象自身的所有Symbol属性的数组。</li>
<li>Reflect.ownKeys()静态方法返回一个由目标对象自身的属性键组成的数组，返回值等同于：Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</li>
</ul>
</blockquote>
<p><strong>Symbol类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</strong>因此，可以保证switch语句按照预想的方式执行。</p>
<h4 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h4><p>用Symbol.for()创建一个Symbol数据时，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，没有则新建并返回一个以该字符串为名称的Symbol值，并登记在全局环境中供搜索。而Symbol()方法生成的值不会登记在全局环境中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<h4 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor()"></a>Symbol.keyFor()</h4><p>Symbol.keyFor()返回一个已登记的Symbol类型值得key，用来检测该字符串参数作为名称得Symbol值是否已经被等级。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sym</span>
</code></pre>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是一种异步解决方案，解决了回调地狱的问题，比传统的回调函数有更好的语义化。一开始由社区提出，es6中将其写进标准语法，原生提供了Promise对象。</p>
<h4 id="Promise对象有以下两个特点："><a href="#Promise对象有以下两个特点：" class="headerlink" title="Promise对象有以下两个特点："></a>Promise对象有以下两个特点：</h4><ul>
<li><p>对象的状态不受外界影响。</p>
<p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfiled（已成功）、rejected（已失败）。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>
</li>
<li><p>状态变化后无法改变，任何时候都可以得到这个结果。Promise对象状态的改变只有两种：从pending变为fulfilled或rejected。状态变为fulfilled或rejected之后就不会改变，会一直保持这个结果，称为resolved。与事件不同，事件错过了之后再去监听得不到结果，但是Promise而言，改变发生之后就一直存在，对Promise对象添加回调函数也能立刻得到这个结果。</p>
</li>
</ul>
<p>有了Promise对象就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数，此外，Promise对象提供统一接口，使得控制异步操作更加容易。</p>
<h4 id="Promise的缺点："><a href="#Promise的缺点：" class="headerlink" title="Promise的缺点："></a>Promise的缺点：</h4><ul>
<li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。</li>
<li>如果不设置回调函数，Promise内部抛出错误，不会反应到外部（不会影响整个程序进行），可以理解为Promise会吃掉（其运行期间的）异常（不能吃编译期异常）。</li>
<li>当处于pending状态时，无法得知目前进展到哪一阶段。</li>
</ul>
<h4 id="Promise状态变更的控制"><a href="#Promise状态变更的控制" class="headerlink" title="Promise状态变更的控制"></a>Promise状态变更的控制</h4><ul>
<li>new Promise的时候，状态为pending。</li>
<li>当执行resolve（），状态由pending变为fulfilled。</li>
<li>当执行reject（），状态由pending变为rejected。</li>
</ul>
<h4 id="Promise基本用法"><a href="#Promise基本用法" class="headerlink" title="Promise基本用法"></a>Promise基本用法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*异步操作成功*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Promise构造函数接收一个函数作为参数，该函数的两个参数分别是resolve、reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>
<p>resolve函数的作用是将Promise对象状态从pending变为resolved，在异步操作成功时调用，并将异步操作的结果作为参数传出去，传给then的第一个参数函数的的形参。</p>
<p>reject函数的作用是将Promise对象的状态从pending变为rejected，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去，传给then第二个参数函数的形参或者catch的参数函数的形参。</p>
<h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then()方法"></a>then()方法</h4><p>Promise.prototype.then()，then方法是定义在原型对象Promise.prototype上的，它的作用是为Promise实例添加状态改变时的回调函数。then()方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then()方法后面再调用另一个then方法。</p>
<p>Promise实例生成之后，可以用then方法指定resolved状态和rejected状态的回调函数。第一个回调函数时Promise对象的状态变为resolved时调用，第二个回调函数时Promise对象的状态变为rejected时调用。两个函数只有一个会被调用，其中，第二个函数是可选的，不一定要提供。</p>
<pre class=" language-js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch()方法"></a>catch()方法</h4><p>Promise.prototype.catch()方法是.then(null,reject)或.then(undefined,rejected)的别名，用于指定发生错误时的回调函数。reject()方法的作用，等同于try{throw new Error()}抛出异常。</p>
<p>Promise对象错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。即错误总是会被下一个catch语句捕获。</p>
<p>一般来说，不要在then()方法里面定义reject状态的回调函数（即then的第二个参数），总是使用catch方法捕获错误。</p>
<p>与传统的try/catch代码块不同的是，如果没有使用catch（）方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，不会影响到Promise外部的代码，简单来说是“Promise会吃掉错误”。</p>
<p>一般总是建议，Promise对象后面要跟catch()方法，这样可以处理Promise内部发生的错误，catch()方法返回的还是一个Promise对象，因此后面还可以接着调用then()方法（或catch方法）。如果没有报错，则会跳过catch()方法。</p>
<h4 id="finally-方法"><a href="#finally-方法" class="headerlink" title="finally()方法"></a>finally()方法</h4><p>Promise.prototype.finally()方法用于指定Promise对象最后状态如何，都会执行的操作，该方法是ES2018引入的标准。finally()方法其实是then()方法的特例，即不管resolved和rejected都调用finally中的方法。</p>
<h4 id="多个异步的协调问题"><a href="#多个异步的协调问题" class="headerlink" title="多个异步的协调问题"></a>多个异步的协调问题</h4><p>除了传统的回调地狱之外，Promise提供了以下方法。</p>
<h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h5><p>用于将多个Promise实例包装成一个新的Promise实例。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>该方法接收一个数组作为参数，数组的值都是Promise实例，如果不是，就会先调用Promise.resolve方法，将参数转为Promise实例，再进一步处理，另外，Promise.all()方法的参数可以不是数组，但是必须有Iterator接口，且返回的每个成员都是Promise实例，</p>
<p>p的状态由p1、p2、p3决定，分成两种情况。</p>
<ul>
<li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li>
<li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值会传递给p的回调函数。</li>
</ul>
<h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h5><p>promise.race()方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>与Promise.all()一样，接收一个数组作为参数，如果数组值不是Promise实例，就会调用Promise.resolve()方法，将参数转为Promise实例。</p>
<p>只要p1、p2、p3之中有一个实例的状态改变，p的状态就跟着改变，那个率先改变状态的Promise实例的返回值，就传递给p的回调函数。</p>
<p>除了以上两种方法之外还有Promsie.allSettled和Promise.any方法，但这两种方法兼容性不优。</p>
<h4 id="Promise总结"><a href="#Promise总结" class="headerlink" title="Promise总结"></a>Promise总结</h4><p>Promise用来解决异步回调问题，由于js是单线程的，很多异步方法都是依靠回调方法实现的，这种做法在逻辑上比较复杂的回调嵌套中会相当复杂，也叫回调地狱。Promise用来将这种繁琐的做法简化，让程序更具备可读性，可维护性。</p>
<p>Promise内部由三种状态：pending、fulfilled、rejected，分别表示程序正在执行但未得到结果即异步操作没有执行完毕、程序执行完毕且成功、程序执行完毕但失败。这里的成功和失败都是逻辑意义上的，并非是要报错。</p>
<p>其实，Promise和回调函数一样，都是要解决数据的传递和消息发送问题，Promise中的then一般对应成功后的数据处理，catch一般对应失败后的数据处理。</p>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator是一种统一的接口机制，来处理所有不同的表示“集合”的数据结构，如Array、Object、Map、Set等。任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>
<h4 id="Iterator的作用："><a href="#Iterator的作用：" class="headerlink" title="Iterator的作用："></a>Iterator的作用：</h4><ul>
<li>为数据结构提供一个统一的、简便的访问接口。</li>
<li>使得数据结构的成员能按某种次序排列。</li>
<li>ES6创建了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。（意味着for…of是Iterator接口的上层表现形式，我们在使用for…of的遍历集合的时候，底层运行逻辑为遍历部署了iteraor接口的集合。）</li>
</ul>
<h4 id="Iterator遍历过程："><a href="#Iterator遍历过程：" class="headerlink" title="Iterator遍历过程："></a>Iterator遍历过程：</h4><ul>
<li>创建一个指针对象，指向当前数据结构的起始位置，也就是说，遍历器对象本质上就是一个指针对象。</li>
<li>第一次调用指针对象的next()方法，可以将指针指向数据结构的第一个成员。</li>
<li>第二次调用指针对象的next()方法，指针就指向数据结构的第二个成员。</li>
<li>不断调用next()方法，直到它指向数据结构的结束位置。</li>
</ul>
<p>每次调用next()方法，都会返回数据结构的当前成员的信息。具体来说就是返回一个包含value和done两个属性的对象。其中value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p>
<h4 id="默认Iterator接口"><a href="#默认Iterator接口" class="headerlink" title="默认Iterator接口"></a>默认Iterator接口</h4><p>ES6规定，默认的Iterator接口部署在数据结构的Symbol.iterator属性，或者说，一个属性只要具有Symbol.iterator属性，就认为是“可遍历的”。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个与定义好的，类型为Symbol的特殊值。</p>
<p>凡是原生具备Iterator接口的数据结构，不用任何处理就可以被for…of循环遍历。原生具备Iterator接口的数据结构包括Array、Map、Set、String、TypedArray、函数的arguments对象、NodeList对象。</p>
<h3 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h3><p>一个数据结构只要部署了Symbol.iterator属性，就可以用for…of循环遍历它的成员。</p>
<p>解构赋值时，会默认调用Symbol.iterator方法。</p>
<p>拓展运算符（…）也会默认的iterator接口。</p>
<p>yield* 后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</p>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>Generator函数是es6提供的一种异步编程解决方案，通过yield关键字把函数的执行流挂起，为改变执行流程提供了可能，语法行为与传统函数完全不同。</p>
<p>Generator函数可以理解成一个状态机，封装了多个内部状态。另外，它还是一个遍历器对象生成函数，执行Generator函数会返回一个遍历器对象，可以依次遍历Gnerator函数内部的每个状态。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>在function后面，函数名之前有个*，用来表示函数是Generator函数；</li>
<li>函数内部有yelid表达式，用来定义函数内部的状态。</li>
</ul>
<h4 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h4><p>调用Generator函数和调用普通函数一样，在函数名后面加上（）即可，但是Generator函数不会像普通函数一样立即执行，而返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator的next()方法，指针就会从函数头部或者上一次停下来的地方开始执行。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//222</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span>  <span class="token keyword">yield</span> <span class="token number">2000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//333</span>
    <span class="token keyword">yield</span> <span class="token number">3000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 1000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 2000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 3000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: undefined, done: true }</span>
</code></pre>
<p>调用Generator函数，返回一个遍历器对象，代表Generator函数的内部指针。以后每次调用遍历器对象的next方法，就会返回一个存着有value和done两个属性的对象。value表示当前的内部状态值，是yield表达式后面的表达式的值；done属性是一个布尔值，表示遍历是否结束。</p>
<h4 id="yield表达式"><a href="#yield表达式" class="headerlink" title="yield表达式"></a>yield表达式</h4><p>由于Generator函数返回的遍历器对象，只有调用next()方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数，yield表达式就是暂停标志。</p>
<p>运行逻辑如下：</p>
<ul>
<li>遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</li>
<li>下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。</li>
<li>如果没有遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</li>
<li>如果没有return语句，则返回的对象的value属性值为undefined。</li>
</ul>
<h4 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h4><p>yield表达式本身没有返回值，或者说她的返回值是undefined。next()方法可以带一个参数，该参数就是上一个yield的表达式的返回值。</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>async函数其实就是Generator函数的语法糖，它使得异步操作更加方便。</p>
<p>async函数就是将Generator函数的*替换成async，将yield替换成await。</p>
<p>async函数返回一个Promise对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<h4 id="async函数对Generator函数的改进"><a href="#async函数对Generator函数的改进" class="headerlink" title="async函数对Generator函数的改进"></a>async函数对Generator函数的改进</h4><ul>
<li><p>内置执行器</p>
<p>Generator函数的执行必须以考执行器（next()），而async函数自带执行器，与普通函数一样，调用即执行。</p>
</li>
<li><p>更好的语义</p>
<p>async和await比起*和yield，语义更清楚。</p>
</li>
<li><p>更广的适用性</p>
<p>co模块约定，yield命令后面只能是Thunk函数或者Promise对象，而async和await命令后面，可以是Promise对象和原始类型的值（数值、字符串</p>
<p>布尔值，但这时会自动转成立即resolved的Promise对象）。</p>
</li>
<li><p>返回值是Promsie</p>
<p>async函数的返回值是Promise，而Generator函数的返回值是Iterator对象，这样更方便使用then方法指定下一步的操作。</p>
</li>
</ul>
<p>进一步说，async函数完全可以看作多个异步操作，包装成的一个Promise对象，而await命令就是内部then命令的语法糖。</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><ul>
<li><p>async函数返回一个Promise对象。</p>
</li>
<li><p>async函数内部return语句返回的值，会成为then方法回调函数的参数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>
</code></pre>
</li>
<li><p>async函数内部抛出错误，会导致返回的Promsie对象变为reject状态。抛出的错误对象会被catch方法回调函数收到。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//error!</span>
</code></pre>
</li>
</ul>
<h4 id="await命令"><a href="#await命令" class="headerlink" title="await命令"></a>await命令</h4><p>正常情况下，await命令后面是一个promise对象，返回该对象的结果。如果不是Promise对象，就直接返回对应的值。</p>
<p>如果await命令后面是一个thenable对象（即定义了then方法的对象），那么await会将其等同于Promise对象。比如Sleep对象的实例。</p>
<p>await命令后面的promise对象如果变为reject状态，则reject参数会被catch方法的回调函数接收到。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//error!</span>
</code></pre>
<p>任何一个await语句后面的Promise对象变为reject状态，那么async函数都会中断执行。</p>
<p><strong>所以，最好把await命令放在try…catch语句中，这样不管这个异步操作是否成功，第二个await都会执行。如果有多个await命令，可以统一放在try…catch结构中。</strong></p>
<p><strong>多个await命令后面的异步操作如果不存在继发关系，最好让他们同时触发，这样可以缩短程序的执行时间。</strong>比如：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//p1和p2互不依赖，可以让他们同时触发，可以写成如下：</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或者</span>
<span class="token keyword">let</span> p1Promise <span class="token operator">=</span> <span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2Promise <span class="token operator">=</span> <span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">await</span> p1Promise<span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">await</span> p2Promise<span class="token punctuation">;</span>
</code></pre>
<p>如果确实希望多个请求并发执行，可以使用Promise.all方法，如上面第二种方法。</p>
<p>await命令只能在async函数之中，如果用在普通函数，就会报错。</p>
<p>async函数会保留运行栈。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//由于b()是异步任务，b()运行结束时，a()可能早就结束了，b()所在的上下文环境已经消失了。如果b()，c()报错，错误栈将不包括a()。</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//如果是async函数，b()运行的时候，a()只是暂停执行，上下文环境都保存这，b()，c()报错，错误栈会包括a()。</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
